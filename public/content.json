{"pages":[],"posts":[{"title":"flutter study day 2 我的第一个flutter应用","text":"day 2 我的第一个flutter应用=========================今天花了几个小时时间终于将flutter环境处理好了于是开始动手写我的一个flutter项目参照flutter中文官网 首先在android studio创建项目create new flutter project -&gt; flutter -&gt; 填写fluttersdk地址 -&gt; 填写项目名字 -&gt; next -&gt; finish 创建完成 修改main.dartimport 'package:flutter/material.dart'; //引入flutter下的material包 void main() { runApp(const MyApp()); } //声明入口文件 //创建myapp类并继承自StatlessWidget组件 class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。 //重写部件 build @override Widget build(BuildContext context) { //传入参数BuildContext context return MaterialApp(//返回 重写后的app title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar(//App顶栏： title: const Text('my_app'),//标题：文本（&quot;my_app&quot;） ), body: const Center(//修改body元素：常量 居中 child: Text('Hello World'),//子元素：文本(&quot;Hello World&quot;) ), ), ); } } 实现如下效果： 导入包包介绍：english_words包含数千个最常用的英文单词以及一些实用功能。在项目目录执行: flutter pub add english_words android studio打开pubspec.yml会提示pub get类似nodejs的npm install安装依赖 导入打开main.dart import 'package:english_words/english_words.dart'; //导入english_words包 未使用的包呈现灰色字体 **调用pair_words ** //重写部件 build @override Widget build(BuildContext context) { //传入参数BuildContext context final word_Pair = WordPair.random();//声明变量 word Pair = wordpaird的random函数随机生成英文 return MaterialApp(//返回 重写后的app title: 'Welcome to Flutter', home: Scaffold( appBar: AppBar(//App顶栏： title: const Text('my_app'),//标题：文本（&quot;my_app&quot;） ), body: Center(//修改body元素：居中显示 child: Text(word_Pair.asPascalCase),//文本(word_paird的随机英文并使用pascalcase进行大驼峰命名法重命名) ), ), ); } 实现如下效果： 添加一个statefull widgetdart.main末尾添加以下代码 //新建类randomwords 继承自statefullwidget class RandomWords extends StatefulWidget { const RandomWords({ Key? key }) : super(key: key); //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。 //重写_RandomWordState类的createState函数 = _RandomWordsState()函数； @override _RandomWordsState createState() =&gt; _RandomWordsState(); } //新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt; class _RandomWordsState extends State&lt;RandomWords&gt; { //重写 build函数 @override Widget build(BuildContext context) { final wordPair = WordPair.random();//wordPair = 随机生成英文单词 return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法 } } 创建一个无限滚动的 ListView修改dart.main向 _RandomWordsState 类中添加一个 _suggestions 列表以保存建议的单词对，同时，添加一个 _biggerFont 变量来增大字体大小 class _RandomWordsState extends State&lt;RandomWords&gt; { final _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0） // ··· } 向 _RandomWordsState 类的 build 方法添加 ListView.builder 在 _RandomWordsState 中的 itemBuilder 里添加 ListTile 函数 class _RandomWordsState extends State&lt;RandomWords&gt; { final _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0） //重写 build函数 @override Widget build(BuildContext context) { final wordPair = WordPair.random();//wordPair = 随机生成英文单词 // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法 return ListView.builder(//返回列表显示 padding: const EdgeInsets.all(16.0),//边距16.0 //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距 itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增 //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。 //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数 if (i.isOdd) return const Divider();/*2*/ //如果 i增加了：返回divider /* Divider是一个分割线控件 height：是控件的高，并不是线的高度，绘制的线居中。 thickness：线的高度。 indent：分割线前面空白区域。 endIndent：分割线后面空白区域。 默认为浅灰色分隔线 */ final index = i ~/ 2; /*3*/ //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。 if (index &gt;= _suggestions.length){//如果 索引小于等于 _suggestions的长度 _suggestions.addAll(generateWordPairs().take(10));/*4*/ //生成10个单词并增加到_suggestions数据内 } return ListTile(//返回列表 title: Text(//标题为文本 _suggestions[index].asPascalCase, //_suggestions[索引].大驼峰命名 style: _biggerFont, //样式为 定义好的 16.0 ) ); }, ); } } //新建类randomwords 继承自statefullwidget class RandomWords extends StatefulWidget { const RandomWords({ Key? key }) : super(key: key); //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。 //重写_RandomWordState类的createState函数 = _RandomWordsState()函数； @override _RandomWordsState createState() =&gt; _RandomWordsState(); } 更新 _RandomWordsState 的 build() 方法以使用_buildSuggestions() //新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt; class _RandomWordsState extends State&lt;RandomWords&gt; { final _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0） //重写 build函数 @override Widget build(BuildContext context) { // final wordPair = WordPair.random();//wordPair = 随机生成英文单词 // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法 return Scaffold( appBar: AppBar( title: const Text('Startup Name Generator'), ), body: ListView.builder(//返回列表显示 padding: const EdgeInsets.all(16.0),//边距16.0 //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距 itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增 //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。 //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数 if (i.isOdd) return const Divider();/*2*/ //如果 i增加了：返回divider /* Divider是一个分割线控件 height：是控件的高，并不是线的高度，绘制的线居中。 thickness：线的高度。 indent：分割线前面空白区域。 endIndent：分割线后面空白区域。 默认为浅灰色分隔线 */ final index = i ~/ 2; /*3*/ //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。 if (index &gt;= _suggestions.length){//如果 索引小于等于 _suggestions的长度 _suggestions.addAll(generateWordPairs().take(10));/*4*/ //生成10个单词并增加到_suggestions数据内 } return ListTile(//返回列表 title: Text(//标题为文本 _suggestions[index].asPascalCase, //_suggestions[索引].大驼峰命名 style: _biggerFont, //样式为 定义好的 16.0 ) ); }, ), ); } } 更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget//创建myapp类并继承自StatlessWidget组件 class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。 //重写部件 build @override Widget build(BuildContext context) { //传入参数BuildContext context return const MaterialApp(//返回 重写后的app title: 'Startup Name Generator', home: RandomWords(), ); } } 最终效果如下：","link":"/2022/04/24/flutter-study-day-2-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAflutter%E5%BA%94%E7%94%A8/"},{"title":"Typora流程图代码实例","text":"Typora流程图示例：横向流程图 123456graph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 竖向流程图 123456graph TDA[方形] --&gt; B(圆角) B --&gt; C{条件a} C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 暂时只用到这两种 其他类型的用到时候再更新吧！","link":"/2022/04/21/Typora%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B/"},{"title":"flutter study day 1 : 学习了Dart语言的基础知识","text":"最近打算用flutter将服务进行中心化于是便有了使用flutter开发的想法 之前就接触了flutter 但是时间关系 一直没有深入了解也只是停留在了Dart语言的基础上就没有继续了对于安卓开发/IOS开发也只是一知半解我相信这将会是一项很有挑战性的项目 今天学习完了flutter的Dart语言基础知识结合了之前学过的Java基础知识发现两者之间并没有多大的不同之处所以理解起来并不算难 本打算学习完了基础知识之后动手模仿写一下flutter的简单的组件但是我发现我的flutter环境消失了 xcode这些基础的开发工具都需要重新安装 那么安装好了之后今天就结束了 明天再开始新的征程吧","link":"/2022/04/23/flutter-study-day-1-%E5%AD%A6%E4%B9%A0%E4%BA%86Dart%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"title":"flutter study day 3 认识StatelessWidget基本组件","text":"Stateless Widget的基本组件======================== Stateless Widget的特点：特点：不依赖自身状态，不必渲染自己 Contrainer 容器 约束子节点，居中，内边距、宽高、颜色、背景、装饰器 Text 文本 显示文本 使用方法：Text(“文本内容”), Icon 图标 icon库里面有多个flutter原生图标可以调用 使用方法：Icons(Icons.android,Colors.color.blue,) 将会显示一个绿色的安卓图标 CloseButton 关闭按钮 动作按钮 CloseButton(点击后将触发什么…), BackButton 返回按钮 动作按钮 BackButton(点击后将触发什么…), Chip 材料设计 Chip(), 有多个属性，可以设置avatar：图标 设置padding边距 margin边距 插入text文字内容等 Divider 分隔线 Divider(), 多个属性 可以设置容器高度、侧边距 分隔线显色等 Card 卡片 Card(), 多个属性，可设置color颜色、elevator内间距、margin外边距、child子元素设置padding、显示文本等 AlertDialog 弹框 AlertDialog(), title: Text(“设置弹窗标题”), content(‘设置弹窗内容’)， 代码示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import 'package:flutter/material.dart';class LessGroupPage extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Stateless基础组件', theme: ThemeData( primarySwatch: Colors.blue, ), home: Scaffold( appBar: AppBar( title: const Text(&quot;Stateless基础组件&quot;),//标题 ), body: Container(//容器组件 decoration: const BoxDecoration(color: Colors.white10),//装饰器 alignment: Alignment.center,//居中显示 child: Column( children: const &lt;Widget&gt;[ Text(//文本组件 &quot;Text&quot;, style: TextStyle(fontSize: 25),//显示文本，字体大小25 ), Icon(//图标组件 Icons.android,//安卓图标 size: 50,//大小50 color: Colors.green,//图标颜色绿色 ), CloseButton(),//关闭按钮 BackButton(),//返回按钮 Chip(//内容元素组件 avatar: Icon(Icons.apple),//元素图标 苹果 label: Text(&quot;hello World!&quot;),//元素内文本 ), Divider(//分隔线 height: 20,//容器高度 indent: 10,//左侧间距 color: Colors.grey,//分隔线颜色黑色 ), Card(//卡片组件 color: Colors.blue,//卡片颜色蓝色 elevation: 5,//内边距 5 margin: EdgeInsets.all(15),//所有外边距15 child: Padding(//添加一个子元素 Padding padding: EdgeInsets.all(8.0),//设置所有外边距 8 child: Text(//显示文本 'fuck me!', ), ), ), AlertDialog(//弹窗组件 title: Text('基础组件之AlertDialog弹窗'),//弹窗标题 content: Text('good job!'),//弹窗内容 ) ], ), ), ), ); }} 编译后样例：","link":"/2022/04/25/flutter-study-day-3-%E8%AE%A4%E8%AF%86StatelessWidget%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6/"},{"title":"vsco+hexo+github创建博客","text":"通过Vsco+Hexo+Github创建个人博客=============================环境准备 本地mac = node12 + vscode + hexo + icaruslinux服务端 = ndoe12 + npm + pm2 + crontabgithub创建项目储存博客内容使用GithubDesktop打开项目 本地环境搭建node使用了pkg方式安装https://nodejs.org/download/release/v12.22.7/ 安装 hexo-clinpm i -g hexo-cli执行以下命令初始化hexohexo init 编辑 _config.yml title: Jaakko的365天 #网站标题 subtitle: '' description: '' keywords: null #搜索关键字 author: Jaakko #作者名称 language: zh-CN #显示语言 执行以下命令拉起hexohexo s 安装 icarus主题npm install hexo-theme-icarushexo config theme icarus 上述环境搭建好后使用GitHubDesktop将内容Push到github linux安装好环境后使用pm2后台挂起hexorun_pm2.js //run const { exec } = require('child_process') exec('hexo server',(error, stdout, stderr) =&gt; { if(error){ console.log('exec error: ${error}') return } console.log('stdout: ${stdout}'); console.log('stderr: ${stderr}'); }) pm2 start run_pm2.js pm2挂载hexopm2 startup 开机自启动 linux使用crontab定时git pull nano /etc/crontab */10 * * * * root /root/blog/auto_git_pull.sh &gt;&gt; /root/blog.log 2&gt;&amp;1 /etc/init.d/crontab restart auto_git_pull.sh #!/bin/bash cd /root/blog/ git pull linux服务端部署完毕 mac本地hexo创建文章hexo new “我的第一篇博客”编写文章push到github自动同步到网站","link":"/2022/04/20/vsco-hexo-github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"title":"解决hexo图片插入不显示问题","text":"说明： 在这之前使用hexo写东西上传照片总是不太方便，所以今天查了一下hexo图片上传以及显示的解决方案。 在hexo目录执行 npm install hexo-asset-img --save 修改_config.yml将post_asset_folder: false 修改为true post_asset_folder: true 通过hexo n “文档文章”新建文章会在source的post下自动生成一个 文章.md 以及一个文章同名目录那么文章同名目录下就可以存放我们需要引用的图片了调用方法： ![](文章目录/your_img.jpg) 经测试：通过以上方式插入图片，在VSCODE的Preview能够正常显示图片在网站的文章内会自动转换成：格式这样即不影响我们编辑文章也不影响文章图片正常显示我们需要的做的就只是正常生成文章将需要的图片上传到目录中正常插入图片 如果使用typora只需要设置文章根目录，上传图片可以直接拖拽或者粘贴会更加便捷。 今天的技术分享到此结束！！","link":"/2022/04/25/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"},{"title":"申请一年野卡域名证书","text":"首先由于Let’S申请的免费泛域证书有效期只有三个月每三个月就要重新生成证书并替换证书文件不像单域名一样可以无限renew并且不用替换证书文件 然后我在购买SSL的网站转了一圈发现 购买价格最低在40美金一年平均价格在350美金 名牌商家的价格甚至超过600美金 所以我找到了一个低成本（30元）申请一年泛域名证书方法在节礼给大家分享一下流程大概是下面这样 1.申请一个域名邮箱(admin@domain.ltd) 2.生成CSR + Private Key 3.使用Token + CSR 申请Alpha泛域 4.在邮箱内确认开通泛域信息 5.合并中间证书 域名邮箱申请CSR生成地址SSL申请地址Token购买地址 证书合并方式：新建一个空白文档(cert.pem) 粘贴邮件尾部的证书 粘贴Alpha中间证书‘—–BEGIN CERTIFICATE—–MIIETTCCAzWgAwIBAgILBAAAAAABRE7wNjEwDQYJKoZIhvcNAQELBQAwVzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jvb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAwMDBaFw0yNDAyMjAxMDAwMDBaMEwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMSIwIAYDVQQDExlBbHBoYVNTTCBDQSAtIFNIQTI1NiAtIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2gHs5OxzYPt+j2q3xhfjkmQy1KwA2aIPue3ua4qGypJn2XTXXUcCPI9A1p5tFM3D2ik5pw8FCmiiZhoexLKLdljlq10dj0CzOYvvHoN9ItDjqQAu7FPPYhmFRChMwCfLew7sEGQAEKQFzKByvkFsMVtI5LHsuSPrVU3QfWJKpbSlpFmFxSWRpv6mCZ8GEG2PgQxkQF5zAJrgLmWYVBAAcJjI4e00X9icxw3A1iNZRfz+VXqG7pRgIvGu0eZVRvaZxRsIdF+ssGSEj4k4HKGnkCFPAm694GFn1PhChw8K98kEbSqpL+9Cpd/do1PbmB6B+Zpye1reTz5/olig4hetZwIDAQABo4IBIzCCAR8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFPXN1TwIUPlqTzq3l9pWg+Zp0mj3MEUGA1UdIAQ+MDwwOgYEVR0gADAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy5hbHBoYXNzbC5jb20vcmVwb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nbG9iYWxzaWduLm5ldC9yb290LmNybDA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAGGIWh0dHA6Ly9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3RyMTAfBgNVHSMEGDAWgBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0BAQsFAAOCAQEAYEBoFkfnFo3bXKFWKsv0XJuwHqJL9csCP/gLofKnQtS3TOvjZoDzJUN4LhsXVgdSGMvRqOzm+3M+pGKMgLTSxRJzo9P6Aji+Yz2EuJnB8br3n8NA0VgYU8Fi3a8YQn80TsVD1XGwMADH45CuP1eGl87qDBKOInDjZqdUfy4oy9RU0LMeYmcI+Sfhy+NmuCQbiWqJRGXy2UzSWByMTsCVodTvZy84IOgu/5ZR8LrYPZJwR2UcnnNytGAMXOLRc3bgr07i5TelRS+KIz6HxzDmMTh89N1SyvNTBCVXVmaU6Avu5gMUTu79bZRknl7OedSyps9AsUSoPocZXun4IRZZUw== —–END CERTIFICATE—–’ 以上[1+2]合并成cert.pem 另外新建一个空白文档(cert.key)粘贴在第二步生成Private Key 将以上两个证书密钥部署到服务器即可完成证书申请到部署全部步骤","link":"/2022/04/22/%E7%94%B3%E8%AF%B7%E4%B8%80%E5%B9%B4%E9%87%8E%E5%8D%A1%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"}],"tags":[{"name":"flutter","slug":"flutter","link":"/tags/flutter/"},{"name":"typora","slug":"typora","link":"/tags/typora/"},{"name":"流程图","slug":"流程图","link":"/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"},{"name":"mermaid","slug":"mermaid","link":"/tags/mermaid/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"}],"categories":[{"name":"flutter","slug":"flutter","link":"/categories/flutter/"},{"name":"技术分享","slug":"技术分享","link":"/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}]}