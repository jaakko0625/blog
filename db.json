{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/colacloudonline.svg","path":"img/colacloudonline.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/images/colacloudonline.png","path":"images/colacloudonline.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/images/colacloudonline.svg","path":"images/colacloudonline.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"787793620ca3c211d619c7710efeec0d7417b114","modified":1650709285413},{"_id":"source/_posts/flutter-study-day-1-学习了Dart语言的基础知识.md","hash":"2446dd6f35a6b9404e335477b0662ec73b097201","modified":1650878082407},{"_id":"source/_posts/Typora流程图代码实例.md","hash":"68ba35ccf411000c1ebac214ed3f7d5267aacba7","modified":1650878040954},{"_id":"source/_posts/flutter-study-day-2-我的第一个flutter应用.md","hash":"ba04295591c7e7e2be3a44395e4c0bbfe779b27a","modified":1650878035667},{"_id":"source/_posts/flutter-study-day-3-认识StatelessWidget基本组件.md","hash":"4278629cbe51d91898d3712c13b028bb29bcb572","modified":1650964889213},{"_id":"source/_posts/vsco-hexo-github创建博客.md","hash":"1e4d6e4bec5238d91d9abc3525f7c743bfad8935","modified":1650878044896},{"_id":"source/_posts/解决hexo图片插入不显示问题.md","hash":"4b5d20bdeeacab4fcbb8de0e999821d7f526ac36","modified":1650877975170},{"_id":"source/_posts/申请一年野卡域名证书.md","hash":"aff98ad5a15c95b51228e004af8c5c9cc1f45105","modified":1650877981597},{"_id":"source/_posts/梦里花落知多少-三毛-荒山之夜.md","hash":"f2f92d68b74e4324fd1dda98b12a4549cb2873a1","modified":1650972990847},{"_id":"source/_posts/Typora流程图代码实例/test.png","hash":"75629e9d87072a5b9ccfdf57acbed71e1d2a96b0","modified":1650874116635},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987271},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987267},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987271},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987272},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987273},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987247},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987250},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987250},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987251},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650366987251},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"631a3b3091c6135b2e492baece01689eba763827","modified":1650366987274},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1650366987245},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1650366987245},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1650366987246},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1650366987244},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1650366987259},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1650366987243},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1650366987244},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1650366987260},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1650366987260},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1650366987261},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1650366987261},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1650366987261},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1650366987263},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1650366987262},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1650366987263},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1650366987263},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1650366987264},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1650366987264},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1650366987264},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1650366987264},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1650366987265},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1650366987266},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1650366987266},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1650366987266},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1650366987271},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1650366987271},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1650366987272},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1650366987271},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1650366987274},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1650366987273},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1650366987245},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1650366987249},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1650366987257},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1650366987246},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1650366987246},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1650366987273},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1650366987252},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1650366987252},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1650366987254},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1650366987254},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1650366987255},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1650366987255},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1650366987255},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1650366987255},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1650366987255},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1650366987256},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1650366987256},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1650366987256},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1650366987257},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1650366987257},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1650366987257},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1650366987267},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1650366987268},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1650366987268},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1650366987268},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1650366987269},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1650366987269},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1650366987270},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1650366987270},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1650366987270},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1650366987270},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1650366987272},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1650366987272},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1650366987268},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1650366987273},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1650366987275},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1650366987275},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1650366987275},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1650366987276},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1650366987276},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1650366987276},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1650366987277},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1650366987277},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1650366987276},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1650366987277},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1650366987278},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1650366987278},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1650366987277},{"_id":"node_modules/hexo-theme-icarus/source/images/favicon.ico","hash":"fc94d527055395e8ba73bc4eba4a394c78339c78","modified":1650521231212},{"_id":"node_modules/hexo-theme-icarus/source/images/colacloudonline.png","hash":"c84de2ab8e7b88cecd28fc6434715191233ff069","modified":1650521480779},{"_id":"node_modules/hexo-theme-icarus/source/images/.DS_Store","hash":"cdb6c5077ab8443c65c279182e2333009a81906c","modified":1650709285412},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1650366987247},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1650366987247},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1650366987248},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1650366987247},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1650366987248},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1650366987248},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1650366987248},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1650366987249},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1650366987249},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1650366987249},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1650366987249},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1650366987248},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1650366987251},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1650366987251},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1650366987250},{"_id":"node_modules/hexo-theme-icarus/source/img/colacloudonline.svg","hash":"4b31724b16c3ce2299322d19d22454104b0828c0","modified":1650521088542},{"_id":"node_modules/hexo-theme-icarus/source/images/colacloudonline.svg","hash":"4b31724b16c3ce2299322d19d22454104b0828c0","modified":1650521210709},{"_id":"source/_posts/Typora流程图代码实例/hello.jpeg","hash":"63fd59f8fdb581396523306dda563ac812282a4d","modified":1650536212930},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1650973025037},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1650973025037},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1650973025037},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1650973025037},{"_id":"public/content.json","hash":"7088b82c99ae42c1b7e69760cd2a6e3db74269d7","modified":1650973025037},{"_id":"public/manifest.json","hash":"942199fc0ff8259e026bb6c9672c6eabd6a68127","modified":1650973025037},{"_id":"public/2022/04/26/梦里花落知多少-三毛-荒山之夜/index.html","hash":"16f9ed63feb49e880848ea743882d1a11463336c","modified":1650973025037},{"_id":"public/2022/04/25/flutter-study-day-3-认识StatelessWidget基本组件/index.html","hash":"77dad61a9acd9b7c67ec962e524d0e3dd57e5e32","modified":1650973025037},{"_id":"public/2022/04/24/flutter-study-day-2-我的第一个flutter应用/index.html","hash":"8a78ce062a035bd8548632c345af4ae3ad81680c","modified":1650973025037},{"_id":"public/2022/04/23/flutter-study-day-1-学习了Dart语言的基础知识/index.html","hash":"38c136a7a55dc565d0e26f8e5ebdc3bc6b7ac3e8","modified":1650973025037},{"_id":"public/2022/04/22/申请一年野卡域名证书/index.html","hash":"2df7e979320a207559ecb692e18f7eb512ca3391","modified":1650973025037},{"_id":"public/2022/04/25/解决hexo图片插入不显示问题/index.html","hash":"3a890e5eaa38112143a3ca662ce320a5b62e234e","modified":1650973025037},{"_id":"public/2022/04/21/Typora流程图代码实例/index.html","hash":"55cc6f2e4571e1a5f1e2f57e3eaa6d23ad6c1c90","modified":1650973025037},{"_id":"public/2022/04/20/vsco-hexo-github创建博客/index.html","hash":"68f88c7edec09ad66f7b7a78b44381934e424756","modified":1650973025037},{"_id":"public/categories/技术分享/index.html","hash":"6e7271ebef6e719d97951301165d201ae7c941f0","modified":1650973025037},{"_id":"public/categories/读书分享/index.html","hash":"79fdbb188bbe4bf95e02eeb1b5eb18110698b5fe","modified":1650973025037},{"_id":"public/categories/flutter/index.html","hash":"a63ac8e5932cf8e8e2c89c65f5da468bd3880f2e","modified":1650973025037},{"_id":"public/index.html","hash":"ab594c5292e3c1e9001b5c4475748ba420fc3ab6","modified":1650973025037},{"_id":"public/archives/index.html","hash":"9933fc7535587d1da6c77f9470f1f23d15f41964","modified":1650973025037},{"_id":"public/archives/2022/index.html","hash":"6d63821d272d794016122e839268ccebb5eeecfd","modified":1650973025037},{"_id":"public/tags/typora/index.html","hash":"89abf7916d73f9c590dddd1bab7aa3e43ff89216","modified":1650973025037},{"_id":"public/archives/2022/04/index.html","hash":"c695ebc716f8652ce9d3b414ceb14713e4e9bbf6","modified":1650973025037},{"_id":"public/tags/流程图/index.html","hash":"b2a9a9d95438870bc563b537a8ad9a5272ac867b","modified":1650973025037},{"_id":"public/tags/mermaid/index.html","hash":"30c8477e5b1c444aba604b2b4bda3bdfe75869ad","modified":1650973025037},{"_id":"public/tags/flutter/index.html","hash":"80056fbb78b7cfba0caac2e74aed03e36b18e281","modified":1650973025037},{"_id":"public/tags/hexo/index.html","hash":"77474de71d4e09001c208c1987a745edee9caec7","modified":1650973025037},{"_id":"public/tags/blog/index.html","hash":"ce9266a0c48e62a527f6587503ee381fbc4b61f6","modified":1650973025037},{"_id":"public/tags/github/index.html","hash":"3983322f530b54430f3ca3d8f7ca504de240818e","modified":1650973025037},{"_id":"public/tags/book/index.html","hash":"357e50af9ee2f58ec04bba2422d4ee963623e9a7","modified":1650973025037},{"_id":"public/tags/SSL/index.html","hash":"89f702b3246ae52d6ec7fa7ed3a12c03b8ce4869","modified":1650973025037},{"_id":"public/tags/三毛/index.html","hash":"1955b4786a8927b19cb2a5027798f633b415a8d8","modified":1650973025037},{"_id":"public/tags/icarus/index.html","hash":"ab00b65fdb4d1aedae90c36f5318682e2f1a0218","modified":1650973025037},{"_id":"public/tags/index.html","hash":"20e7a66615d09fa1403c0a773686e88ffb3f8c63","modified":1650973025037},{"_id":"public/categories/index.html","hash":"d18c17f4e2aeab21781bc49b33250ab08a3cb10b","modified":1650973025037},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1650973025037},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1650973025037},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1650973025037},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1650973025037},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1650973025037},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1650973025037},{"_id":"public/images/colacloudonline.png","hash":"c84de2ab8e7b88cecd28fc6434715191233ff069","modified":1650973025037},{"_id":"public/images/favicon.ico","hash":"fc94d527055395e8ba73bc4eba4a394c78339c78","modified":1650973025037},{"_id":"public/2022/04/21/Typora流程图代码实例/test.png","hash":"75629e9d87072a5b9ccfdf57acbed71e1d2a96b0","modified":1650973025037},{"_id":"public/img/colacloudonline.svg","hash":"4b31724b16c3ce2299322d19d22454104b0828c0","modified":1650973025037},{"_id":"public/images/colacloudonline.svg","hash":"4b31724b16c3ce2299322d19d22454104b0828c0","modified":1650973025037},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1650973025037},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1650973025037},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1650973025037},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1650973025037},{"_id":"public/css/cyberpunk.css","hash":"073797b87e28376604d586c48beb66f6fe9cb504","modified":1650973025037},{"_id":"public/css/default.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1650973025037},{"_id":"public/css/style.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1650973025037},{"_id":"public/2022/04/21/Typora流程图代码实例/hello.jpeg","hash":"63fd59f8fdb581396523306dda563ac812282a4d","modified":1650973025037}],"Category":[{"name":"技术分享","_id":"cl2g2pnpw0002efw5ap2307fo"},{"name":"flutter","_id":"cl2g2pnpx0004efw5csf0b0on"},{"name":"读书分享","_id":"cl2g2pnq3000pefw5fan42bii"}],"Data":[],"Page":[],"Post":[{"title":"Typora流程图代码实例","date":"2022-04-21T10:11:45.000Z","_content":"\n![test](Typora流程图代码实例/hello.jpeg)\n\nTypora流程图\n===========\n\n示例：\n----\n**横向流程图**\n```mermaid\ngraph LR\nA[方形] -->B(圆角)\n    B --> C{条件a}\n    C -->|a=1| D[结果1]\n    C -->|a=2| E[结果2]\n    F[横向流程图]\n```\n\n**竖向流程图**\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\n\n暂时只用到这两种 其他类型的用到时候再更新吧！\n","source":"_posts/Typora流程图代码实例.md","raw":"---\ntitle: Typora流程图代码实例\ndate: 2022-04-21 18:11:45\ntags: [typora,流程图,mermaid]\ncategories: 技术分享\n---\n\n![test](Typora流程图代码实例/hello.jpeg)\n\nTypora流程图\n===========\n\n示例：\n----\n**横向流程图**\n```mermaid\ngraph LR\nA[方形] -->B(圆角)\n    B --> C{条件a}\n    C -->|a=1| D[结果1]\n    C -->|a=2| E[结果2]\n    F[横向流程图]\n```\n\n**竖向流程图**\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\n\n暂时只用到这两种 其他类型的用到时候再更新吧！\n","slug":"Typora流程图代码实例","published":1,"updated":"2022-04-25T09:14:00.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnpp0000efw50qrn6sty","content":"<img src=\"/2022/04/21/Typora%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B/hello.jpeg\" class=\"\" title=\"test\">\n\n<h1 id=\"Typora流程图\"><a href=\"#Typora流程图\" class=\"headerlink\" title=\"Typora流程图\"></a>Typora流程图</h1><h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p><strong>横向流程图</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[方形] --&gt;B(圆角)</span><br><span class=\"line\">    B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">    C --&gt;|a=1| D[结果1]</span><br><span class=\"line\">    C --&gt;|a=2| E[结果2]</span><br><span class=\"line\">    F[横向流程图]</span><br></pre></td></tr></table></figure>\n\n<p><strong>竖向流程图</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">    B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">    C --&gt; |a=1| D[结果1]</span><br><span class=\"line\">    C --&gt; |a=2| E[结果2]</span><br><span class=\"line\">    F[竖向流程图]</span><br></pre></td></tr></table></figure>\n\n<p>暂时只用到这两种 其他类型的用到时候再更新吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2022/04/21/Typora%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B/hello.jpeg\" class=\"\" title=\"test\">\n\n<h1 id=\"Typora流程图\"><a href=\"#Typora流程图\" class=\"headerlink\" title=\"Typora流程图\"></a>Typora流程图</h1><h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p><strong>横向流程图</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[方形] --&gt;B(圆角)</span><br><span class=\"line\">    B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">    C --&gt;|a=1| D[结果1]</span><br><span class=\"line\">    C --&gt;|a=2| E[结果2]</span><br><span class=\"line\">    F[横向流程图]</span><br></pre></td></tr></table></figure>\n\n<p><strong>竖向流程图</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">    B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">    C --&gt; |a=1| D[结果1]</span><br><span class=\"line\">    C --&gt; |a=2| E[结果2]</span><br><span class=\"line\">    F[竖向流程图]</span><br></pre></td></tr></table></figure>\n\n<p>暂时只用到这两种 其他类型的用到时候再更新吧！</p>\n"},{"title":"flutter study day 1 : 学习了Dart语言的基础知识","date":"2022-04-23T11:06:54.000Z","_content":"![flutter 第一天](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxk3qdi4cj31kw0w0kh2.jpg)\n\n最近打算用flutter将服务进行中心化  \n于是便有了使用flutter开发的想法\n\n之前就接触了flutter 但是时间关系 一直没有深入了解  \n也只是停留在了Dart语言的基础上就没有继续了  \n对于安卓开发/IOS开发也只是一知半解  \n我相信这将会是一项很有挑战性的项目  \n\n今天学习完了flutter的Dart语言基础知识  \n结合了之前学过的Java基础知识  \n发现两者之间并没有多大的不同之处  \n所以理解起来并不算难\n\n本打算学习完了基础知识之后动手模仿写一下flutter的简单的组件\n但是我发现我的flutter环境消失了 xcode这些基础的开发工具都需要重新安装  那么安装好了之后今天就结束了 明天再开始新的征程吧\n\n","source":"_posts/flutter-study-day-1-学习了Dart语言的基础知识.md","raw":"---\ntitle: 'flutter study day 1 : 学习了Dart语言的基础知识'\ndate: 2022-04-23 19:06:54\ntags: [flutter]\ncategories: flutter\n---\n![flutter 第一天](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxk3qdi4cj31kw0w0kh2.jpg)\n\n最近打算用flutter将服务进行中心化  \n于是便有了使用flutter开发的想法\n\n之前就接触了flutter 但是时间关系 一直没有深入了解  \n也只是停留在了Dart语言的基础上就没有继续了  \n对于安卓开发/IOS开发也只是一知半解  \n我相信这将会是一项很有挑战性的项目  \n\n今天学习完了flutter的Dart语言基础知识  \n结合了之前学过的Java基础知识  \n发现两者之间并没有多大的不同之处  \n所以理解起来并不算难\n\n本打算学习完了基础知识之后动手模仿写一下flutter的简单的组件\n但是我发现我的flutter环境消失了 xcode这些基础的开发工具都需要重新安装  那么安装好了之后今天就结束了 明天再开始新的征程吧\n\n","slug":"flutter-study-day-1-学习了Dart语言的基础知识","published":1,"updated":"2022-04-25T09:14:42.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnpu0001efw59mf29qoa","content":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxk3qdi4cj31kw0w0kh2.jpg\" alt=\"flutter 第一天\"></p>\n<p>最近打算用flutter将服务进行中心化<br>于是便有了使用flutter开发的想法</p>\n<p>之前就接触了flutter 但是时间关系 一直没有深入了解<br>也只是停留在了Dart语言的基础上就没有继续了<br>对于安卓开发&#x2F;IOS开发也只是一知半解<br>我相信这将会是一项很有挑战性的项目  </p>\n<p>今天学习完了flutter的Dart语言基础知识<br>结合了之前学过的Java基础知识<br>发现两者之间并没有多大的不同之处<br>所以理解起来并不算难</p>\n<p>本打算学习完了基础知识之后动手模仿写一下flutter的简单的组件<br>但是我发现我的flutter环境消失了 xcode这些基础的开发工具都需要重新安装  那么安装好了之后今天就结束了 明天再开始新的征程吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxk3qdi4cj31kw0w0kh2.jpg\" alt=\"flutter 第一天\"></p>\n<p>最近打算用flutter将服务进行中心化<br>于是便有了使用flutter开发的想法</p>\n<p>之前就接触了flutter 但是时间关系 一直没有深入了解<br>也只是停留在了Dart语言的基础上就没有继续了<br>对于安卓开发&#x2F;IOS开发也只是一知半解<br>我相信这将会是一项很有挑战性的项目  </p>\n<p>今天学习完了flutter的Dart语言基础知识<br>结合了之前学过的Java基础知识<br>发现两者之间并没有多大的不同之处<br>所以理解起来并不算难</p>\n<p>本打算学习完了基础知识之后动手模仿写一下flutter的简单的组件<br>但是我发现我的flutter环境消失了 xcode这些基础的开发工具都需要重新安装  那么安装好了之后今天就结束了 明天再开始新的征程吧</p>\n"},{"title":"flutter study day 2 我的第一个flutter应用","date":"2022-04-24T10:03:49.000Z","_content":"![我的第一个flutter应用](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxkjdzgusj31hc0u0nfc.jpg)\nday 2 我的第一个flutter应用\n=========================\n今天花了几个小时时间终于将flutter环境处理好了  \n于是开始动手写我的一个flutter项目\n[参照flutter中文官网](https://flutter.cn/docs/get-started/codelab)  \n\n### 首先\n在android studio创建项目  \ncreate new flutter project -> flutter -> 填写fluttersdk地址 -> 填写项目名字 -> next -> finish 创建完成\n\n### 修改main.dart\n    import 'package:flutter/material.dart';\n    //引入flutter下的material包\n\n    void main() {\n    runApp(const MyApp());\n    }\n    //声明入口文件\n\n    //创建myapp类并继承自StatlessWidget组件\n    class MyApp extends StatelessWidget {\n    const MyApp({Key? key}) : super(key: key);\n    //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        return MaterialApp(//返回 重写后的app\n        title: 'Welcome to Flutter',\n        home: Scaffold(\n            appBar: AppBar(//App顶栏：\n            title: const Text('my_app'),//标题：文本（\"my_app\"）\n            ),\n            body: const Center(//修改body元素：常量 居中\n            child: Text('Hello World'),//子元素：文本(\"Hello World\")\n            ),\n        ),\n        );\n    }\n    }\n\n实现如下效果：\n![](https://flutter.cn/assets/images/docs/get-started/ios/hello-world.png)\n\n### 导入包\n包介绍：english_words  \n包含数千个最常用的英文单词以及一些实用功能。  \n在项目目录执行:  \n    flutter pub add english_words\n\nandroid studio打开pubspec.yml会提示pub get  \n类似nodejs的npm install安装依赖\n\n导入  \n打开main.dart  \n\n    import 'package:english_words/english_words.dart';\n    //导入english_words包 未使用的包呈现灰色字体\n\n**调用pair_words  **\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        final word_Pair = WordPair.random();//声明变量 word Pair = wordpaird的random函数随机生成英文\n        return MaterialApp(//返回 重写后的app\n        title: 'Welcome to Flutter',\n        home: Scaffold(\n            appBar: AppBar(//App顶栏：\n            title: const Text('my_app'),//标题：文本（\"my_app\"）\n            ),\n            body: Center(//修改body元素：居中显示\n            child: Text(word_Pair.asPascalCase),//文本(word_paird的随机英文并使用pascalcase进行大驼峰命名法重命名)\n            ),\n        ),\n        );\n    }\n\n实现如下效果：\n![](https://flutter.cn/assets/images/docs/get-started/ios/step2.png)\n\n### 添加一个statefull widget  \n\n**dart.main末尾添加以下代码**\n\n    //新建类randomwords 继承自statefullwidget\n    class RandomWords extends StatefulWidget {\n        const RandomWords({ Key? key }) : super(key: key);\n        //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n        //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n        @override\n        _RandomWordsState createState() => _RandomWordsState();\n    }\n    //新建类——randomwordsstate 继承自 state<泛型 RandomWords>\n    class _RandomWordsState extends State<RandomWords> {\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n            final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n            return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        }\n    }\n\n### 创建一个无限滚动的 ListView  \n\n**修改dart.main**\n**向 _RandomWordsState 类中添加一个 _suggestions 列表以保存建议的单词对，同时，添加一个 _biggerFont 变量来增大字体大小**\n\n        class _RandomWordsState extends State<RandomWords> {\n            final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n            final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n            // ···\n        }\n\n    向 _RandomWordsState 类的 build 方法添加 ListView.builder\n    在 _RandomWordsState 中的 itemBuilder 里添加 ListTile 函数\n    class _RandomWordsState extends State<RandomWords> {\n    final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n    final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n        final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        return ListView.builder(//返回列表显示\n        padding: const EdgeInsets.all(16.0),//边距16.0\n        //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n        itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增\n            //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n            //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n            if (i.isOdd) return const Divider();/*2*/\n            //如果 i增加了：返回divider\n            /*\n            Divider是一个分割线控件\n                height：是控件的高，并不是线的高度，绘制的线居中。\n                thickness：线的高度。\n                indent：分割线前面空白区域。\n                endIndent：分割线后面空白区域。\n            默认为浅灰色分隔线\n            */\n\n            final index = i ~/ 2; /*3*/\n            //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n            if (index >= _suggestions.length){//如果 索引小于等于 _suggestions的长度\n            _suggestions.addAll(generateWordPairs().take(10));/*4*/\n            //生成10个单词并增加到_suggestions数据内\n            }\n            return ListTile(//返回列表\n            title: Text(//标题为文本\n                _suggestions[index].asPascalCase,\n                //_suggestions[索引].大驼峰命名\n                style: _biggerFont,\n                //样式为 定义好的 16.0\n            )\n            );\n        },\n        );\n    }\n    }\n\n    //新建类randomwords 继承自statefullwidget\n    class RandomWords extends StatefulWidget {\n    const RandomWords({ Key? key }) : super(key: key);\n    //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n    @override\n    _RandomWordsState createState() => _RandomWordsState();\n    }\n\n**更新 _RandomWordsState 的 build() 方法以使用_buildSuggestions()**\n\n    //新建类——randomwordsstate 继承自 state<泛型 RandomWords>\n    class _RandomWordsState extends State<RandomWords> {\n    final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n    final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n        // final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        return Scaffold(\n        appBar: AppBar(\n            title: const Text('Startup Name Generator'),\n        ),\n        body: ListView.builder(//返回列表显示\n        padding: const EdgeInsets.all(16.0),//边距16.0\n        //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n        itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增\n            //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n            //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n            if (i.isOdd) return const Divider();/*2*/\n            //如果 i增加了：返回divider\n            /*\n            Divider是一个分割线控件\n                height：是控件的高，并不是线的高度，绘制的线居中。\n                thickness：线的高度。\n                indent：分割线前面空白区域。\n                endIndent：分割线后面空白区域。\n            默认为浅灰色分隔线\n            */\n\n            final index = i ~/ 2; /*3*/\n            //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n            if (index >= _suggestions.length){//如果 索引小于等于 _suggestions的长度\n            _suggestions.addAll(generateWordPairs().take(10));/*4*/\n            //生成10个单词并增加到_suggestions数据内\n            }\n            return ListTile(//返回列表\n            title: Text(//标题为文本\n                _suggestions[index].asPascalCase,\n                //_suggestions[索引].大驼峰命名\n                style: _biggerFont,\n                //样式为 定义好的 16.0\n            )\n            );\n        },\n        ),\n        );\n    }\n    }\n\n### 更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget\n\n    //创建myapp类并继承自StatlessWidget组件\n    class MyApp extends StatelessWidget {\n    const MyApp({Key? key}) : super(key: key);\n    //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        return const MaterialApp(//返回 重写后的app\n        title: 'Startup Name Generator',\n        home: RandomWords(),\n        );\n    }\n    }\n\n最终效果如下：\n![](https://flutter.cn/assets/images/docs/get-started/ios/step4-infinite-list.png)","source":"_posts/flutter-study-day-2-我的第一个flutter应用.md","raw":"---\ntitle: flutter study day 2 我的第一个flutter应用\ndate: 2022-04-24 18:03:49\ntags: [flutter]\ncategories: flutter\n---\n![我的第一个flutter应用](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxkjdzgusj31hc0u0nfc.jpg)\nday 2 我的第一个flutter应用\n=========================\n今天花了几个小时时间终于将flutter环境处理好了  \n于是开始动手写我的一个flutter项目\n[参照flutter中文官网](https://flutter.cn/docs/get-started/codelab)  \n\n### 首先\n在android studio创建项目  \ncreate new flutter project -> flutter -> 填写fluttersdk地址 -> 填写项目名字 -> next -> finish 创建完成\n\n### 修改main.dart\n    import 'package:flutter/material.dart';\n    //引入flutter下的material包\n\n    void main() {\n    runApp(const MyApp());\n    }\n    //声明入口文件\n\n    //创建myapp类并继承自StatlessWidget组件\n    class MyApp extends StatelessWidget {\n    const MyApp({Key? key}) : super(key: key);\n    //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        return MaterialApp(//返回 重写后的app\n        title: 'Welcome to Flutter',\n        home: Scaffold(\n            appBar: AppBar(//App顶栏：\n            title: const Text('my_app'),//标题：文本（\"my_app\"）\n            ),\n            body: const Center(//修改body元素：常量 居中\n            child: Text('Hello World'),//子元素：文本(\"Hello World\")\n            ),\n        ),\n        );\n    }\n    }\n\n实现如下效果：\n![](https://flutter.cn/assets/images/docs/get-started/ios/hello-world.png)\n\n### 导入包\n包介绍：english_words  \n包含数千个最常用的英文单词以及一些实用功能。  \n在项目目录执行:  \n    flutter pub add english_words\n\nandroid studio打开pubspec.yml会提示pub get  \n类似nodejs的npm install安装依赖\n\n导入  \n打开main.dart  \n\n    import 'package:english_words/english_words.dart';\n    //导入english_words包 未使用的包呈现灰色字体\n\n**调用pair_words  **\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        final word_Pair = WordPair.random();//声明变量 word Pair = wordpaird的random函数随机生成英文\n        return MaterialApp(//返回 重写后的app\n        title: 'Welcome to Flutter',\n        home: Scaffold(\n            appBar: AppBar(//App顶栏：\n            title: const Text('my_app'),//标题：文本（\"my_app\"）\n            ),\n            body: Center(//修改body元素：居中显示\n            child: Text(word_Pair.asPascalCase),//文本(word_paird的随机英文并使用pascalcase进行大驼峰命名法重命名)\n            ),\n        ),\n        );\n    }\n\n实现如下效果：\n![](https://flutter.cn/assets/images/docs/get-started/ios/step2.png)\n\n### 添加一个statefull widget  \n\n**dart.main末尾添加以下代码**\n\n    //新建类randomwords 继承自statefullwidget\n    class RandomWords extends StatefulWidget {\n        const RandomWords({ Key? key }) : super(key: key);\n        //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n        //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n        @override\n        _RandomWordsState createState() => _RandomWordsState();\n    }\n    //新建类——randomwordsstate 继承自 state<泛型 RandomWords>\n    class _RandomWordsState extends State<RandomWords> {\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n            final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n            return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        }\n    }\n\n### 创建一个无限滚动的 ListView  \n\n**修改dart.main**\n**向 _RandomWordsState 类中添加一个 _suggestions 列表以保存建议的单词对，同时，添加一个 _biggerFont 变量来增大字体大小**\n\n        class _RandomWordsState extends State<RandomWords> {\n            final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n            final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n            // ···\n        }\n\n    向 _RandomWordsState 类的 build 方法添加 ListView.builder\n    在 _RandomWordsState 中的 itemBuilder 里添加 ListTile 函数\n    class _RandomWordsState extends State<RandomWords> {\n    final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n    final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n        final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        return ListView.builder(//返回列表显示\n        padding: const EdgeInsets.all(16.0),//边距16.0\n        //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n        itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增\n            //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n            //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n            if (i.isOdd) return const Divider();/*2*/\n            //如果 i增加了：返回divider\n            /*\n            Divider是一个分割线控件\n                height：是控件的高，并不是线的高度，绘制的线居中。\n                thickness：线的高度。\n                indent：分割线前面空白区域。\n                endIndent：分割线后面空白区域。\n            默认为浅灰色分隔线\n            */\n\n            final index = i ~/ 2; /*3*/\n            //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n            if (index >= _suggestions.length){//如果 索引小于等于 _suggestions的长度\n            _suggestions.addAll(generateWordPairs().take(10));/*4*/\n            //生成10个单词并增加到_suggestions数据内\n            }\n            return ListTile(//返回列表\n            title: Text(//标题为文本\n                _suggestions[index].asPascalCase,\n                //_suggestions[索引].大驼峰命名\n                style: _biggerFont,\n                //样式为 定义好的 16.0\n            )\n            );\n        },\n        );\n    }\n    }\n\n    //新建类randomwords 继承自statefullwidget\n    class RandomWords extends StatefulWidget {\n    const RandomWords({ Key? key }) : super(key: key);\n    //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n    @override\n    _RandomWordsState createState() => _RandomWordsState();\n    }\n\n**更新 _RandomWordsState 的 build() 方法以使用_buildSuggestions()**\n\n    //新建类——randomwordsstate 继承自 state<泛型 RandomWords>\n    class _RandomWordsState extends State<RandomWords> {\n    final _suggestions = <WordPair>[];//新增数组_suggestions数据 泛型为WordPair\n    final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n    //重写 build函数\n    @override\n    Widget build(BuildContext context) {\n        // final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n        return Scaffold(\n        appBar: AppBar(\n            title: const Text('Startup Name Generator'),\n        ),\n        body: ListView.builder(//返回列表显示\n        padding: const EdgeInsets.all(16.0),//边距16.0\n        //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n        itemBuilder: /*1*/ (context, i){//参数：连接,迭代器i（从0开始);每调用一次会自增\n            //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n            //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n            if (i.isOdd) return const Divider();/*2*/\n            //如果 i增加了：返回divider\n            /*\n            Divider是一个分割线控件\n                height：是控件的高，并不是线的高度，绘制的线居中。\n                thickness：线的高度。\n                indent：分割线前面空白区域。\n                endIndent：分割线后面空白区域。\n            默认为浅灰色分隔线\n            */\n\n            final index = i ~/ 2; /*3*/\n            //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n            if (index >= _suggestions.length){//如果 索引小于等于 _suggestions的长度\n            _suggestions.addAll(generateWordPairs().take(10));/*4*/\n            //生成10个单词并增加到_suggestions数据内\n            }\n            return ListTile(//返回列表\n            title: Text(//标题为文本\n                _suggestions[index].asPascalCase,\n                //_suggestions[索引].大驼峰命名\n                style: _biggerFont,\n                //样式为 定义好的 16.0\n            )\n            );\n        },\n        ),\n        );\n    }\n    }\n\n### 更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget\n\n    //创建myapp类并继承自StatlessWidget组件\n    class MyApp extends StatelessWidget {\n    const MyApp({Key? key}) : super(key: key);\n    //进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写部件 build\n    @override\n    Widget build(BuildContext context) { //传入参数BuildContext context\n        return const MaterialApp(//返回 重写后的app\n        title: 'Startup Name Generator',\n        home: RandomWords(),\n        );\n    }\n    }\n\n最终效果如下：\n![](https://flutter.cn/assets/images/docs/get-started/ios/step4-infinite-list.png)","slug":"flutter-study-day-2-我的第一个flutter应用","published":1,"updated":"2022-04-25T09:13:55.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq0000eefw51v59h498","content":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxkjdzgusj31hc0u0nfc.jpg\" alt=\"我的第一个flutter应用\"><br>day 2 我的第一个flutter应用<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>今天花了几个小时时间终于将flutter环境处理好了<br>于是开始动手写我的一个flutter项目<br><a href=\"https://flutter.cn/docs/get-started/codelab\">参照flutter中文官网</a>  </p>\n<h3 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h3><p>在android studio创建项目<br>create new flutter project -&gt; flutter -&gt; 填写fluttersdk地址 -&gt; 填写项目名字 -&gt; next -&gt; finish 创建完成</p>\n<h3 id=\"修改main-dart\"><a href=\"#修改main-dart\" class=\"headerlink\" title=\"修改main.dart\"></a>修改main.dart</h3><pre><code>import &#39;package:flutter/material.dart&#39;;\n//引入flutter下的material包\n\nvoid main() &#123;\nrunApp(const MyApp());\n&#125;\n//声明入口文件\n\n//创建myapp类并继承自StatlessWidget组件\nclass MyApp extends StatelessWidget &#123;\nconst MyApp(&#123;Key? key&#125;) : super(key: key);\n//进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    return MaterialApp(//返回 重写后的app\n    title: &#39;Welcome to Flutter&#39;,\n    home: Scaffold(\n        appBar: AppBar(//App顶栏：\n        title: const Text(&#39;my_app&#39;),//标题：文本（&quot;my_app&quot;）\n        ),\n        body: const Center(//修改body元素：常量 居中\n        child: Text(&#39;Hello World&#39;),//子元素：文本(&quot;Hello World&quot;)\n        ),\n    ),\n    );\n&#125;\n&#125;\n</code></pre>\n<p>实现如下效果：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/hello-world.png\"></p>\n<h3 id=\"导入包\"><a href=\"#导入包\" class=\"headerlink\" title=\"导入包\"></a>导入包</h3><p>包介绍：english_words<br>包含数千个最常用的英文单词以及一些实用功能。<br>在项目目录执行:<br>    flutter pub add english_words</p>\n<p>android studio打开pubspec.yml会提示pub get<br>类似nodejs的npm install安装依赖</p>\n<p>导入<br>打开main.dart  </p>\n<pre><code>import &#39;package:english_words/english_words.dart&#39;;\n//导入english_words包 未使用的包呈现灰色字体\n</code></pre>\n<p>**调用pair_words  **</p>\n<pre><code>//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    final word_Pair = WordPair.random();//声明变量 word Pair = wordpaird的random函数随机生成英文\n    return MaterialApp(//返回 重写后的app\n    title: &#39;Welcome to Flutter&#39;,\n    home: Scaffold(\n        appBar: AppBar(//App顶栏：\n        title: const Text(&#39;my_app&#39;),//标题：文本（&quot;my_app&quot;）\n        ),\n        body: Center(//修改body元素：居中显示\n        child: Text(word_Pair.asPascalCase),//文本(word_paird的随机英文并使用pascalcase进行大驼峰命名法重命名)\n        ),\n    ),\n    );\n&#125;\n</code></pre>\n<p>实现如下效果：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/step2.png\"></p>\n<h3 id=\"添加一个statefull-widget\"><a href=\"#添加一个statefull-widget\" class=\"headerlink\" title=\"添加一个statefull widget\"></a>添加一个statefull widget</h3><p><strong>dart.main末尾添加以下代码</strong></p>\n<pre><code>//新建类randomwords 继承自statefullwidget\nclass RandomWords extends StatefulWidget &#123;\n    const RandomWords(&#123; Key? key &#125;) : super(key: key);\n    //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n    @override\n    _RandomWordsState createState() =&gt; _RandomWordsState();\n&#125;\n//新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt;\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n        final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"创建一个无限滚动的-ListView\"><a href=\"#创建一个无限滚动的-ListView\" class=\"headerlink\" title=\"创建一个无限滚动的 ListView\"></a>创建一个无限滚动的 ListView</h3><p><strong>修改dart.main</strong><br><strong>向 _RandomWordsState 类中添加一个 _suggestions 列表以保存建议的单词对，同时，添加一个 _biggerFont 变量来增大字体大小</strong></p>\n<pre><code>    class _RandomWordsState extends State&lt;RandomWords&gt; &#123;\n        final _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\n        final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n        // ···\n    &#125;\n\n向 _RandomWordsState 类的 build 方法添加 ListView.builder\n在 _RandomWordsState 中的 itemBuilder 里添加 ListTile 函数\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\nfinal _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\nfinal _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n    final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n    // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    return ListView.builder(//返回列表显示\n    padding: const EdgeInsets.all(16.0),//边距16.0\n    //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n    itemBuilder: /*1*/ (context, i)&#123;//参数：连接,迭代器i（从0开始);每调用一次会自增\n        //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n        //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n        if (i.isOdd) return const Divider();/*2*/\n        //如果 i增加了：返回divider\n        /*\n        Divider是一个分割线控件\n            height：是控件的高，并不是线的高度，绘制的线居中。\n            thickness：线的高度。\n            indent：分割线前面空白区域。\n            endIndent：分割线后面空白区域。\n        默认为浅灰色分隔线\n        */\n\n        final index = i ~/ 2; /*3*/\n        //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n        if (index &gt;= _suggestions.length)&#123;//如果 索引小于等于 _suggestions的长度\n        _suggestions.addAll(generateWordPairs().take(10));/*4*/\n        //生成10个单词并增加到_suggestions数据内\n        &#125;\n        return ListTile(//返回列表\n        title: Text(//标题为文本\n            _suggestions[index].asPascalCase,\n            //_suggestions[索引].大驼峰命名\n            style: _biggerFont,\n            //样式为 定义好的 16.0\n        )\n        );\n    &#125;,\n    );\n&#125;\n&#125;\n\n//新建类randomwords 继承自statefullwidget\nclass RandomWords extends StatefulWidget &#123;\nconst RandomWords(&#123; Key? key &#125;) : super(key: key);\n//函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n@override\n_RandomWordsState createState() =&gt; _RandomWordsState();\n&#125;\n</code></pre>\n<p><strong>更新 _RandomWordsState 的 build() 方法以使用_buildSuggestions()</strong></p>\n<pre><code>//新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt;\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\nfinal _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\nfinal _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n    // final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n    // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    return Scaffold(\n    appBar: AppBar(\n        title: const Text(&#39;Startup Name Generator&#39;),\n    ),\n    body: ListView.builder(//返回列表显示\n    padding: const EdgeInsets.all(16.0),//边距16.0\n    //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n    itemBuilder: /*1*/ (context, i)&#123;//参数：连接,迭代器i（从0开始);每调用一次会自增\n        //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n        //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n        if (i.isOdd) return const Divider();/*2*/\n        //如果 i增加了：返回divider\n        /*\n        Divider是一个分割线控件\n            height：是控件的高，并不是线的高度，绘制的线居中。\n            thickness：线的高度。\n            indent：分割线前面空白区域。\n            endIndent：分割线后面空白区域。\n        默认为浅灰色分隔线\n        */\n\n        final index = i ~/ 2; /*3*/\n        //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n        if (index &gt;= _suggestions.length)&#123;//如果 索引小于等于 _suggestions的长度\n        _suggestions.addAll(generateWordPairs().take(10));/*4*/\n        //生成10个单词并增加到_suggestions数据内\n        &#125;\n        return ListTile(//返回列表\n        title: Text(//标题为文本\n            _suggestions[index].asPascalCase,\n            //_suggestions[索引].大驼峰命名\n            style: _biggerFont,\n            //样式为 定义好的 16.0\n        )\n        );\n    &#125;,\n    ),\n    );\n&#125;\n&#125;\n</code></pre>\n<h3 id=\"更新-MyApp-的-build-方法，修改-title-的值来改变标题，修改-home-的值为-RandomWords-widget\"><a href=\"#更新-MyApp-的-build-方法，修改-title-的值来改变标题，修改-home-的值为-RandomWords-widget\" class=\"headerlink\" title=\"更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget\"></a>更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget</h3><pre><code>//创建myapp类并继承自StatlessWidget组件\nclass MyApp extends StatelessWidget &#123;\nconst MyApp(&#123;Key? key&#125;) : super(key: key);\n//进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    return const MaterialApp(//返回 重写后的app\n    title: &#39;Startup Name Generator&#39;,\n    home: RandomWords(),\n    );\n&#125;\n&#125;\n</code></pre>\n<p>最终效果如下：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/step4-infinite-list.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxkjdzgusj31hc0u0nfc.jpg\" alt=\"我的第一个flutter应用\"><br>day 2 我的第一个flutter应用<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>今天花了几个小时时间终于将flutter环境处理好了<br>于是开始动手写我的一个flutter项目<br><a href=\"https://flutter.cn/docs/get-started/codelab\">参照flutter中文官网</a>  </p>\n<h3 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h3><p>在android studio创建项目<br>create new flutter project -&gt; flutter -&gt; 填写fluttersdk地址 -&gt; 填写项目名字 -&gt; next -&gt; finish 创建完成</p>\n<h3 id=\"修改main-dart\"><a href=\"#修改main-dart\" class=\"headerlink\" title=\"修改main.dart\"></a>修改main.dart</h3><pre><code>import &#39;package:flutter/material.dart&#39;;\n//引入flutter下的material包\n\nvoid main() &#123;\nrunApp(const MyApp());\n&#125;\n//声明入口文件\n\n//创建myapp类并继承自StatlessWidget组件\nclass MyApp extends StatelessWidget &#123;\nconst MyApp(&#123;Key? key&#125;) : super(key: key);\n//进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    return MaterialApp(//返回 重写后的app\n    title: &#39;Welcome to Flutter&#39;,\n    home: Scaffold(\n        appBar: AppBar(//App顶栏：\n        title: const Text(&#39;my_app&#39;),//标题：文本（&quot;my_app&quot;）\n        ),\n        body: const Center(//修改body元素：常量 居中\n        child: Text(&#39;Hello World&#39;),//子元素：文本(&quot;Hello World&quot;)\n        ),\n    ),\n    );\n&#125;\n&#125;\n</code></pre>\n<p>实现如下效果：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/hello-world.png\"></p>\n<h3 id=\"导入包\"><a href=\"#导入包\" class=\"headerlink\" title=\"导入包\"></a>导入包</h3><p>包介绍：english_words<br>包含数千个最常用的英文单词以及一些实用功能。<br>在项目目录执行:<br>    flutter pub add english_words</p>\n<p>android studio打开pubspec.yml会提示pub get<br>类似nodejs的npm install安装依赖</p>\n<p>导入<br>打开main.dart  </p>\n<pre><code>import &#39;package:english_words/english_words.dart&#39;;\n//导入english_words包 未使用的包呈现灰色字体\n</code></pre>\n<p>**调用pair_words  **</p>\n<pre><code>//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    final word_Pair = WordPair.random();//声明变量 word Pair = wordpaird的random函数随机生成英文\n    return MaterialApp(//返回 重写后的app\n    title: &#39;Welcome to Flutter&#39;,\n    home: Scaffold(\n        appBar: AppBar(//App顶栏：\n        title: const Text(&#39;my_app&#39;),//标题：文本（&quot;my_app&quot;）\n        ),\n        body: Center(//修改body元素：居中显示\n        child: Text(word_Pair.asPascalCase),//文本(word_paird的随机英文并使用pascalcase进行大驼峰命名法重命名)\n        ),\n    ),\n    );\n&#125;\n</code></pre>\n<p>实现如下效果：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/step2.png\"></p>\n<h3 id=\"添加一个statefull-widget\"><a href=\"#添加一个statefull-widget\" class=\"headerlink\" title=\"添加一个statefull widget\"></a>添加一个statefull widget</h3><p><strong>dart.main末尾添加以下代码</strong></p>\n<pre><code>//新建类randomwords 继承自statefullwidget\nclass RandomWords extends StatefulWidget &#123;\n    const RandomWords(&#123; Key? key &#125;) : super(key: key);\n    //函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n    //重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n    @override\n    _RandomWordsState createState() =&gt; _RandomWordsState();\n&#125;\n//新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt;\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n        final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n        return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"创建一个无限滚动的-ListView\"><a href=\"#创建一个无限滚动的-ListView\" class=\"headerlink\" title=\"创建一个无限滚动的 ListView\"></a>创建一个无限滚动的 ListView</h3><p><strong>修改dart.main</strong><br><strong>向 _RandomWordsState 类中添加一个 _suggestions 列表以保存建议的单词对，同时，添加一个 _biggerFont 变量来增大字体大小</strong></p>\n<pre><code>    class _RandomWordsState extends State&lt;RandomWords&gt; &#123;\n        final _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\n        final _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n        // ···\n    &#125;\n\n向 _RandomWordsState 类的 build 方法添加 ListView.builder\n在 _RandomWordsState 中的 itemBuilder 里添加 ListTile 函数\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\nfinal _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\nfinal _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n    final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n    // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    return ListView.builder(//返回列表显示\n    padding: const EdgeInsets.all(16.0),//边距16.0\n    //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n    itemBuilder: /*1*/ (context, i)&#123;//参数：连接,迭代器i（从0开始);每调用一次会自增\n        //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n        //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n        if (i.isOdd) return const Divider();/*2*/\n        //如果 i增加了：返回divider\n        /*\n        Divider是一个分割线控件\n            height：是控件的高，并不是线的高度，绘制的线居中。\n            thickness：线的高度。\n            indent：分割线前面空白区域。\n            endIndent：分割线后面空白区域。\n        默认为浅灰色分隔线\n        */\n\n        final index = i ~/ 2; /*3*/\n        //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n        if (index &gt;= _suggestions.length)&#123;//如果 索引小于等于 _suggestions的长度\n        _suggestions.addAll(generateWordPairs().take(10));/*4*/\n        //生成10个单词并增加到_suggestions数据内\n        &#125;\n        return ListTile(//返回列表\n        title: Text(//标题为文本\n            _suggestions[index].asPascalCase,\n            //_suggestions[索引].大驼峰命名\n            style: _biggerFont,\n            //样式为 定义好的 16.0\n        )\n        );\n    &#125;,\n    );\n&#125;\n&#125;\n\n//新建类randomwords 继承自statefullwidget\nclass RandomWords extends StatefulWidget &#123;\nconst RandomWords(&#123; Key? key &#125;) : super(key: key);\n//函数初始化 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写_RandomWordState类的createState函数 = _RandomWordsState()函数；\n@override\n_RandomWordsState createState() =&gt; _RandomWordsState();\n&#125;\n</code></pre>\n<p><strong>更新 _RandomWordsState 的 build() 方法以使用_buildSuggestions()</strong></p>\n<pre><code>//新建类——randomwordsstate 继承自 state&lt;泛型 RandomWords&gt;\nclass _RandomWordsState extends State&lt;RandomWords&gt; &#123;\nfinal _suggestions = &lt;WordPair&gt;[];//新增数组_suggestions数据 泛型为WordPair\nfinal _biggerFont = const TextStyle(fontSize: 18.0);//新建变量 _biggerFont 定义 文本样式（字体大小 18.0）\n//重写 build函数\n@override\nWidget build(BuildContext context) &#123;\n    // final wordPair = WordPair.random();//wordPair = 随机生成英文单词\n    // return Text(wordPair.asPascalCase);//返回文本 随机生成单词并使用大驼峰命名法\n    return Scaffold(\n    appBar: AppBar(\n        title: const Text(&#39;Startup Name Generator&#39;),\n    ),\n    body: ListView.builder(//返回列表显示\n    padding: const EdgeInsets.all(16.0),//边距16.0\n    //EdgeInsets对象：为四个方向设定固定的边距 .all为所有方向设置边距\n    itemBuilder: /*1*/ (context, i)&#123;//参数：连接,迭代器i（从0开始);每调用一次会自增\n        //每次建议的单词对都会让其递增两次，一次是 ListTile，另一次是 Divider。它用于创建一个在用户滚动时候无限增长的列表。\n        //ListView 类提供了一个名为 itemBuilder 的 builder 属性，这是一个工厂匿名回调函数，接受两个参数\n        if (i.isOdd) return const Divider();/*2*/\n        //如果 i增加了：返回divider\n        /*\n        Divider是一个分割线控件\n            height：是控件的高，并不是线的高度，绘制的线居中。\n            thickness：线的高度。\n            indent：分割线前面空白区域。\n            endIndent：分割线后面空白区域。\n        默认为浅灰色分隔线\n        */\n\n        final index = i ~/ 2; /*3*/\n        //定义 索引 = i / 2 向下取整 计算出 ListView 中减去分隔线后的实际单词对数量。\n        if (index &gt;= _suggestions.length)&#123;//如果 索引小于等于 _suggestions的长度\n        _suggestions.addAll(generateWordPairs().take(10));/*4*/\n        //生成10个单词并增加到_suggestions数据内\n        &#125;\n        return ListTile(//返回列表\n        title: Text(//标题为文本\n            _suggestions[index].asPascalCase,\n            //_suggestions[索引].大驼峰命名\n            style: _biggerFont,\n            //样式为 定义好的 16.0\n        )\n        );\n    &#125;,\n    ),\n    );\n&#125;\n&#125;\n</code></pre>\n<h3 id=\"更新-MyApp-的-build-方法，修改-title-的值来改变标题，修改-home-的值为-RandomWords-widget\"><a href=\"#更新-MyApp-的-build-方法，修改-title-的值来改变标题，修改-home-的值为-RandomWords-widget\" class=\"headerlink\" title=\"更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget\"></a>更新 MyApp 的 build() 方法，修改 title 的值来改变标题，修改 home 的值为 RandomWords widget</h3><pre><code>//创建myapp类并继承自StatlessWidget组件\nclass MyApp extends StatelessWidget &#123;\nconst MyApp(&#123;Key? key&#125;) : super(key: key);\n//进行函数构造 Flutter 框架中 Widget 構造函數都提供了Key 作為可選參數。\n\n//重写部件 build\n@override\nWidget build(BuildContext context) &#123; //传入参数BuildContext context\n    return const MaterialApp(//返回 重写后的app\n    title: &#39;Startup Name Generator&#39;,\n    home: RandomWords(),\n    );\n&#125;\n&#125;\n</code></pre>\n<p>最终效果如下：<br><img src=\"https://flutter.cn/assets/images/docs/get-started/ios/step4-infinite-list.png\"></p>\n"},{"title":"flutter study day 3 认识StatelessWidget基本组件","date":"2022-04-25T11:38:24.000Z","_content":"![认识StatelessWidget基本组件](https://tva4.sinaimg.cn/large/0072Vf1pgy1foxkcpa9qqj31kw0w07sa.jpg)\n\nStateless Widget的基本组件\n========================\n\nStateless Widget的特点：\n---------------------\n**特点：不依赖自身状态，不必渲染自己**\n\n**Contrainer 容器**\n\n约束子节点，居中，内边距、宽高、颜色、背景、装饰器\n\n**Text 文本** 显示文本\n\n使用方法：Text(“文本内容”),\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/2798CF63-4C43-443C-B013-792DA7DE14F4_2/nSAJMHtokxoXfG7hlqwxHyOJI8MhcnUKpMdiHM9gzewz/Image.png)\n\n**Icon 图标** icon库里面有多个flutter原生图标可以调用\n\n使用方法：Icons(Icons.android,Colors.color.blue,)\n\n将会显示一个绿色的安卓图标\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/471CDCE8-0AD0-46EF-A5AB-C688D1F384AB_2/qpaQYGNARNK0PBtFXNix4UT4Rlyp0bT1WZuiMv9VwCsz/Image.png)\n\n**CloseButton 关闭按钮** 动作按钮\n\nCloseButton(点击后将触发什么…),\n\n**BackButton 返回按钮** 动作按钮\n\nBackButton(点击后将触发什么…),\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/9897418F-2DAF-43C0-8B12-CDA5EF7F52DD_2/OhpQFdsX7n83TtHGYmwrxSswnNJr4KO7xbx4yEj7M8Az/Image.png)\n\n**Chip 材料设计**\n\nChip(),\n\n有多个属性，可以设置avatar：图标\n\n设置padding边距 margin边距 插入text文字内容等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/F8EBB7BB-A486-47CE-851F-FDCDE3540297_2/wZUawMCyY6yPN3ZYqViGpdlbtrvxFWdJoKG5n7H8XB4z/Image.png)\n\n**Divider 分隔线**\n\nDivider(),\n\n多个属性 可以设置容器高度、侧边距 分隔线显色等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4ED58CF5-842F-4F6B-8DE7-180E90B0D3B5_2/AuL1Ib3PGO41xxGBB7p7BzMMQMDfvRv05r4gwIimMN4z/Image.png)\n\n**Card 卡片**\n\nCard(),\n\n多个属性，可设置color颜色、elevator内间距、margin外边距、child子元素设置padding、显示文本等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/E911BD5B-B48C-49CC-97A1-01197E7544EF_2/gJ9TXuaxoxhw6IuIlblUgprJyUmIlddZhdi2NtoCcmUz/Image.png)\n\n**AlertDialog 弹框**\n\nAlertDialog(),\n\ntitle: Text(“设置弹窗标题”),\n\ncontent(‘设置弹窗内容’)，\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4BB0FF3A-5E98-4275-B0B9-169EB71E64D9_2/4uFhNQKJlkZIGAqz3LeBARhjlyTIpy0Q9kmJugIbbTwz/Image.png)\n\n代码示例：\n\n```other\nimport 'package:flutter/material.dart';\n\nclass LessGroupPage extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Stateless基础组件',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Stateless基础组件\"),//标题\n        ),\n        body: Container(//容器组件\n          decoration: const BoxDecoration(color: Colors.white10),//装饰器\n          alignment: Alignment.center,//居中显示\n          child: Column(\n            children: const <Widget>[\n              Text(//文本组件\n                \"Text\",\n                style: TextStyle(fontSize: 25),//显示文本，字体大小25\n              ),\n              Icon(//图标组件\n                Icons.android,//安卓图标\n                size: 50,//大小50\n                color: Colors.green,//图标颜色绿色\n              ),\n              CloseButton(),//关闭按钮\n              BackButton(),//返回按钮\n              Chip(//内容元素组件\n                avatar: Icon(Icons.apple),//元素图标 苹果\n                label: Text(\"hello World!\"),//元素内文本\n              ),\n              Divider(//分隔线\n                height: 20,//容器高度\n                indent: 10,//左侧间距\n                color: Colors.grey,//分隔线颜色黑色\n              ),\n              Card(//卡片组件\n                color: Colors.blue,//卡片颜色蓝色\n                elevation: 5,//内边距 5\n                margin: EdgeInsets.all(15),//所有外边距15\n                child: Padding(//添加一个子元素 Padding\n                  padding: EdgeInsets.all(8.0),//设置所有外边距 8\n                  child: Text(//显示文本\n                    'fuck me!',\n                  ),\n                ),\n              ),\n              AlertDialog(//弹窗组件\n                title: Text('基础组件之AlertDialog弹窗'),//弹窗标题\n                content: Text('good job!'),//弹窗内容\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n\n编译后样例：\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/FC300307-A7C5-4D64-9B03-4B10FECFC65D_2/iarHFJUEsVz9DHNlwfYxb1q4ivbVAiqx4qUjXmzrMokz/Image.png)\n","source":"_posts/flutter-study-day-3-认识StatelessWidget基本组件.md","raw":"---\ntitle: flutter study day 3 认识StatelessWidget基本组件\ndate: 2022-04-25 19:38:24\ntags: [flutter]\ncategories: flutter\n---\n![认识StatelessWidget基本组件](https://tva4.sinaimg.cn/large/0072Vf1pgy1foxkcpa9qqj31kw0w07sa.jpg)\n\nStateless Widget的基本组件\n========================\n\nStateless Widget的特点：\n---------------------\n**特点：不依赖自身状态，不必渲染自己**\n\n**Contrainer 容器**\n\n约束子节点，居中，内边距、宽高、颜色、背景、装饰器\n\n**Text 文本** 显示文本\n\n使用方法：Text(“文本内容”),\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/2798CF63-4C43-443C-B013-792DA7DE14F4_2/nSAJMHtokxoXfG7hlqwxHyOJI8MhcnUKpMdiHM9gzewz/Image.png)\n\n**Icon 图标** icon库里面有多个flutter原生图标可以调用\n\n使用方法：Icons(Icons.android,Colors.color.blue,)\n\n将会显示一个绿色的安卓图标\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/471CDCE8-0AD0-46EF-A5AB-C688D1F384AB_2/qpaQYGNARNK0PBtFXNix4UT4Rlyp0bT1WZuiMv9VwCsz/Image.png)\n\n**CloseButton 关闭按钮** 动作按钮\n\nCloseButton(点击后将触发什么…),\n\n**BackButton 返回按钮** 动作按钮\n\nBackButton(点击后将触发什么…),\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/9897418F-2DAF-43C0-8B12-CDA5EF7F52DD_2/OhpQFdsX7n83TtHGYmwrxSswnNJr4KO7xbx4yEj7M8Az/Image.png)\n\n**Chip 材料设计**\n\nChip(),\n\n有多个属性，可以设置avatar：图标\n\n设置padding边距 margin边距 插入text文字内容等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/F8EBB7BB-A486-47CE-851F-FDCDE3540297_2/wZUawMCyY6yPN3ZYqViGpdlbtrvxFWdJoKG5n7H8XB4z/Image.png)\n\n**Divider 分隔线**\n\nDivider(),\n\n多个属性 可以设置容器高度、侧边距 分隔线显色等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4ED58CF5-842F-4F6B-8DE7-180E90B0D3B5_2/AuL1Ib3PGO41xxGBB7p7BzMMQMDfvRv05r4gwIimMN4z/Image.png)\n\n**Card 卡片**\n\nCard(),\n\n多个属性，可设置color颜色、elevator内间距、margin外边距、child子元素设置padding、显示文本等\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/E911BD5B-B48C-49CC-97A1-01197E7544EF_2/gJ9TXuaxoxhw6IuIlblUgprJyUmIlddZhdi2NtoCcmUz/Image.png)\n\n**AlertDialog 弹框**\n\nAlertDialog(),\n\ntitle: Text(“设置弹窗标题”),\n\ncontent(‘设置弹窗内容’)，\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4BB0FF3A-5E98-4275-B0B9-169EB71E64D9_2/4uFhNQKJlkZIGAqz3LeBARhjlyTIpy0Q9kmJugIbbTwz/Image.png)\n\n代码示例：\n\n```other\nimport 'package:flutter/material.dart';\n\nclass LessGroupPage extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Stateless基础组件',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Stateless基础组件\"),//标题\n        ),\n        body: Container(//容器组件\n          decoration: const BoxDecoration(color: Colors.white10),//装饰器\n          alignment: Alignment.center,//居中显示\n          child: Column(\n            children: const <Widget>[\n              Text(//文本组件\n                \"Text\",\n                style: TextStyle(fontSize: 25),//显示文本，字体大小25\n              ),\n              Icon(//图标组件\n                Icons.android,//安卓图标\n                size: 50,//大小50\n                color: Colors.green,//图标颜色绿色\n              ),\n              CloseButton(),//关闭按钮\n              BackButton(),//返回按钮\n              Chip(//内容元素组件\n                avatar: Icon(Icons.apple),//元素图标 苹果\n                label: Text(\"hello World!\"),//元素内文本\n              ),\n              Divider(//分隔线\n                height: 20,//容器高度\n                indent: 10,//左侧间距\n                color: Colors.grey,//分隔线颜色黑色\n              ),\n              Card(//卡片组件\n                color: Colors.blue,//卡片颜色蓝色\n                elevation: 5,//内边距 5\n                margin: EdgeInsets.all(15),//所有外边距15\n                child: Padding(//添加一个子元素 Padding\n                  padding: EdgeInsets.all(8.0),//设置所有外边距 8\n                  child: Text(//显示文本\n                    'fuck me!',\n                  ),\n                ),\n              ),\n              AlertDialog(//弹窗组件\n                title: Text('基础组件之AlertDialog弹窗'),//弹窗标题\n                content: Text('good job!'),//弹窗内容\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n\n编译后样例：\n\n![image](https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/FC300307-A7C5-4D64-9B03-4B10FECFC65D_2/iarHFJUEsVz9DHNlwfYxb1q4ivbVAiqx4qUjXmzrMokz/Image.png)\n","slug":"flutter-study-day-3-认识StatelessWidget基本组件","published":1,"updated":"2022-04-26T09:21:29.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq0000fefw52zs4f38p","content":"<p><img src=\"https://tva4.sinaimg.cn/large/0072Vf1pgy1foxkcpa9qqj31kw0w07sa.jpg\" alt=\"认识StatelessWidget基本组件\"></p>\n<h1 id=\"Stateless-Widget的基本组件\"><a href=\"#Stateless-Widget的基本组件\" class=\"headerlink\" title=\"Stateless Widget的基本组件\"></a>Stateless Widget的基本组件</h1><h2 id=\"Stateless-Widget的特点：\"><a href=\"#Stateless-Widget的特点：\" class=\"headerlink\" title=\"Stateless Widget的特点：\"></a>Stateless Widget的特点：</h2><p><strong>特点：不依赖自身状态，不必渲染自己</strong></p>\n<p><strong>Contrainer 容器</strong></p>\n<p>约束子节点，居中，内边距、宽高、颜色、背景、装饰器</p>\n<p><strong>Text 文本</strong> 显示文本</p>\n<p>使用方法：Text(“文本内容”),</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/2798CF63-4C43-443C-B013-792DA7DE14F4_2/nSAJMHtokxoXfG7hlqwxHyOJI8MhcnUKpMdiHM9gzewz/Image.png\" alt=\"image\"></p>\n<p><strong>Icon 图标</strong> icon库里面有多个flutter原生图标可以调用</p>\n<p>使用方法：Icons(Icons.android,Colors.color.blue,)</p>\n<p>将会显示一个绿色的安卓图标</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/471CDCE8-0AD0-46EF-A5AB-C688D1F384AB_2/qpaQYGNARNK0PBtFXNix4UT4Rlyp0bT1WZuiMv9VwCsz/Image.png\" alt=\"image\"></p>\n<p><strong>CloseButton 关闭按钮</strong> 动作按钮</p>\n<p>CloseButton(点击后将触发什么…),</p>\n<p><strong>BackButton 返回按钮</strong> 动作按钮</p>\n<p>BackButton(点击后将触发什么…),</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/9897418F-2DAF-43C0-8B12-CDA5EF7F52DD_2/OhpQFdsX7n83TtHGYmwrxSswnNJr4KO7xbx4yEj7M8Az/Image.png\" alt=\"image\"></p>\n<p><strong>Chip 材料设计</strong></p>\n<p>Chip(),</p>\n<p>有多个属性，可以设置avatar：图标</p>\n<p>设置padding边距 margin边距 插入text文字内容等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/F8EBB7BB-A486-47CE-851F-FDCDE3540297_2/wZUawMCyY6yPN3ZYqViGpdlbtrvxFWdJoKG5n7H8XB4z/Image.png\" alt=\"image\"></p>\n<p><strong>Divider 分隔线</strong></p>\n<p>Divider(),</p>\n<p>多个属性 可以设置容器高度、侧边距 分隔线显色等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4ED58CF5-842F-4F6B-8DE7-180E90B0D3B5_2/AuL1Ib3PGO41xxGBB7p7BzMMQMDfvRv05r4gwIimMN4z/Image.png\" alt=\"image\"></p>\n<p><strong>Card 卡片</strong></p>\n<p>Card(),</p>\n<p>多个属性，可设置color颜色、elevator内间距、margin外边距、child子元素设置padding、显示文本等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/E911BD5B-B48C-49CC-97A1-01197E7544EF_2/gJ9TXuaxoxhw6IuIlblUgprJyUmIlddZhdi2NtoCcmUz/Image.png\" alt=\"image\"></p>\n<p><strong>AlertDialog 弹框</strong></p>\n<p>AlertDialog(),</p>\n<p>title: Text(“设置弹窗标题”),</p>\n<p>content(‘设置弹窗内容’)，</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4BB0FF3A-5E98-4275-B0B9-169EB71E64D9_2/4uFhNQKJlkZIGAqz3LeBARhjlyTIpy0Q9kmJugIbbTwz/Image.png\" alt=\"image\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;package:flutter/material.dart&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LessGroupPage extends StatelessWidget &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      title: &#x27;Stateless基础组件&#x27;,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">          title: const Text(&quot;Stateless基础组件&quot;),//标题</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: Container(//容器组件</span><br><span class=\"line\">          decoration: const BoxDecoration(color: Colors.white10),//装饰器</span><br><span class=\"line\">          alignment: Alignment.center,//居中显示</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            children: const &lt;Widget&gt;[</span><br><span class=\"line\">              Text(//文本组件</span><br><span class=\"line\">                &quot;Text&quot;,</span><br><span class=\"line\">                style: TextStyle(fontSize: 25),//显示文本，字体大小25</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Icon(//图标组件</span><br><span class=\"line\">                Icons.android,//安卓图标</span><br><span class=\"line\">                size: 50,//大小50</span><br><span class=\"line\">                color: Colors.green,//图标颜色绿色</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              CloseButton(),//关闭按钮</span><br><span class=\"line\">              BackButton(),//返回按钮</span><br><span class=\"line\">              Chip(//内容元素组件</span><br><span class=\"line\">                avatar: Icon(Icons.apple),//元素图标 苹果</span><br><span class=\"line\">                label: Text(&quot;hello World!&quot;),//元素内文本</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Divider(//分隔线</span><br><span class=\"line\">                height: 20,//容器高度</span><br><span class=\"line\">                indent: 10,//左侧间距</span><br><span class=\"line\">                color: Colors.grey,//分隔线颜色黑色</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Card(//卡片组件</span><br><span class=\"line\">                color: Colors.blue,//卡片颜色蓝色</span><br><span class=\"line\">                elevation: 5,//内边距 5</span><br><span class=\"line\">                margin: EdgeInsets.all(15),//所有外边距15</span><br><span class=\"line\">                child: Padding(//添加一个子元素 Padding</span><br><span class=\"line\">                  padding: EdgeInsets.all(8.0),//设置所有外边距 8</span><br><span class=\"line\">                  child: Text(//显示文本</span><br><span class=\"line\">                    &#x27;fuck me!&#x27;,</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              AlertDialog(//弹窗组件</span><br><span class=\"line\">                title: Text(&#x27;基础组件之AlertDialog弹窗&#x27;),//弹窗标题</span><br><span class=\"line\">                content: Text(&#x27;good job!&#x27;),//弹窗内容</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>编译后样例：</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/FC300307-A7C5-4D64-9B03-4B10FECFC65D_2/iarHFJUEsVz9DHNlwfYxb1q4ivbVAiqx4qUjXmzrMokz/Image.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva4.sinaimg.cn/large/0072Vf1pgy1foxkcpa9qqj31kw0w07sa.jpg\" alt=\"认识StatelessWidget基本组件\"></p>\n<h1 id=\"Stateless-Widget的基本组件\"><a href=\"#Stateless-Widget的基本组件\" class=\"headerlink\" title=\"Stateless Widget的基本组件\"></a>Stateless Widget的基本组件</h1><h2 id=\"Stateless-Widget的特点：\"><a href=\"#Stateless-Widget的特点：\" class=\"headerlink\" title=\"Stateless Widget的特点：\"></a>Stateless Widget的特点：</h2><p><strong>特点：不依赖自身状态，不必渲染自己</strong></p>\n<p><strong>Contrainer 容器</strong></p>\n<p>约束子节点，居中，内边距、宽高、颜色、背景、装饰器</p>\n<p><strong>Text 文本</strong> 显示文本</p>\n<p>使用方法：Text(“文本内容”),</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/2798CF63-4C43-443C-B013-792DA7DE14F4_2/nSAJMHtokxoXfG7hlqwxHyOJI8MhcnUKpMdiHM9gzewz/Image.png\" alt=\"image\"></p>\n<p><strong>Icon 图标</strong> icon库里面有多个flutter原生图标可以调用</p>\n<p>使用方法：Icons(Icons.android,Colors.color.blue,)</p>\n<p>将会显示一个绿色的安卓图标</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/471CDCE8-0AD0-46EF-A5AB-C688D1F384AB_2/qpaQYGNARNK0PBtFXNix4UT4Rlyp0bT1WZuiMv9VwCsz/Image.png\" alt=\"image\"></p>\n<p><strong>CloseButton 关闭按钮</strong> 动作按钮</p>\n<p>CloseButton(点击后将触发什么…),</p>\n<p><strong>BackButton 返回按钮</strong> 动作按钮</p>\n<p>BackButton(点击后将触发什么…),</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/9897418F-2DAF-43C0-8B12-CDA5EF7F52DD_2/OhpQFdsX7n83TtHGYmwrxSswnNJr4KO7xbx4yEj7M8Az/Image.png\" alt=\"image\"></p>\n<p><strong>Chip 材料设计</strong></p>\n<p>Chip(),</p>\n<p>有多个属性，可以设置avatar：图标</p>\n<p>设置padding边距 margin边距 插入text文字内容等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/F8EBB7BB-A486-47CE-851F-FDCDE3540297_2/wZUawMCyY6yPN3ZYqViGpdlbtrvxFWdJoKG5n7H8XB4z/Image.png\" alt=\"image\"></p>\n<p><strong>Divider 分隔线</strong></p>\n<p>Divider(),</p>\n<p>多个属性 可以设置容器高度、侧边距 分隔线显色等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4ED58CF5-842F-4F6B-8DE7-180E90B0D3B5_2/AuL1Ib3PGO41xxGBB7p7BzMMQMDfvRv05r4gwIimMN4z/Image.png\" alt=\"image\"></p>\n<p><strong>Card 卡片</strong></p>\n<p>Card(),</p>\n<p>多个属性，可设置color颜色、elevator内间距、margin外边距、child子元素设置padding、显示文本等</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/E911BD5B-B48C-49CC-97A1-01197E7544EF_2/gJ9TXuaxoxhw6IuIlblUgprJyUmIlddZhdi2NtoCcmUz/Image.png\" alt=\"image\"></p>\n<p><strong>AlertDialog 弹框</strong></p>\n<p>AlertDialog(),</p>\n<p>title: Text(“设置弹窗标题”),</p>\n<p>content(‘设置弹窗内容’)，</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/4BB0FF3A-5E98-4275-B0B9-169EB71E64D9_2/4uFhNQKJlkZIGAqz3LeBARhjlyTIpy0Q9kmJugIbbTwz/Image.png\" alt=\"image\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;package:flutter/material.dart&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LessGroupPage extends StatelessWidget &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      title: &#x27;Stateless基础组件&#x27;,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">          title: const Text(&quot;Stateless基础组件&quot;),//标题</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: Container(//容器组件</span><br><span class=\"line\">          decoration: const BoxDecoration(color: Colors.white10),//装饰器</span><br><span class=\"line\">          alignment: Alignment.center,//居中显示</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            children: const &lt;Widget&gt;[</span><br><span class=\"line\">              Text(//文本组件</span><br><span class=\"line\">                &quot;Text&quot;,</span><br><span class=\"line\">                style: TextStyle(fontSize: 25),//显示文本，字体大小25</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Icon(//图标组件</span><br><span class=\"line\">                Icons.android,//安卓图标</span><br><span class=\"line\">                size: 50,//大小50</span><br><span class=\"line\">                color: Colors.green,//图标颜色绿色</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              CloseButton(),//关闭按钮</span><br><span class=\"line\">              BackButton(),//返回按钮</span><br><span class=\"line\">              Chip(//内容元素组件</span><br><span class=\"line\">                avatar: Icon(Icons.apple),//元素图标 苹果</span><br><span class=\"line\">                label: Text(&quot;hello World!&quot;),//元素内文本</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Divider(//分隔线</span><br><span class=\"line\">                height: 20,//容器高度</span><br><span class=\"line\">                indent: 10,//左侧间距</span><br><span class=\"line\">                color: Colors.grey,//分隔线颜色黑色</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Card(//卡片组件</span><br><span class=\"line\">                color: Colors.blue,//卡片颜色蓝色</span><br><span class=\"line\">                elevation: 5,//内边距 5</span><br><span class=\"line\">                margin: EdgeInsets.all(15),//所有外边距15</span><br><span class=\"line\">                child: Padding(//添加一个子元素 Padding</span><br><span class=\"line\">                  padding: EdgeInsets.all(8.0),//设置所有外边距 8</span><br><span class=\"line\">                  child: Text(//显示文本</span><br><span class=\"line\">                    &#x27;fuck me!&#x27;,</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              AlertDialog(//弹窗组件</span><br><span class=\"line\">                title: Text(&#x27;基础组件之AlertDialog弹窗&#x27;),//弹窗标题</span><br><span class=\"line\">                content: Text(&#x27;good job!&#x27;),//弹窗内容</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>编译后样例：</p>\n<p><img src=\"https://res.craft.do/user/full/95b613cb-a607-3458-0fba-b0ca77de5993/doc/252A0C58-AC05-42C0-B5C0-D63E1992C0D1/FC300307-A7C5-4D64-9B03-4B10FECFC65D_2/iarHFJUEsVz9DHNlwfYxb1q4ivbVAiqx4qUjXmzrMokz/Image.png\" alt=\"image\"></p>\n"},{"title":"vsco+hexo+github创建博客","date":"2022-04-20T06:14:38.000Z","_content":"![vsco+hexo+github创建博客](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxki70guwj31kw0w0qpu.jpg)\n通过Vsco+Hexo+Github创建个人博客\n=============================\n环境准备\n-----\n#### 本地mac = node12 + vscode + hexo + icarus  \n#### linux服务端 = ndoe12 + npm + pm2 + crontab\n\n**github创建项目储存博客内容  \n使用GithubDesktop打开项目**\n\n### 本地环境搭建\n**node使用了pkg方式安装**\n<https://nodejs.org/download/release/v12.22.7/>\n\n**安装 hexo-cli**  \nnpm i -g hexo-cli \n执行以下命令初始化hexo\nhexo init\n\n**编辑 _config.yml**\n\n    title: Jaakko的365天 #网站标题\n    subtitle: ''\n    description: ''\n    keywords: null #搜索关键字\n    author: Jaakko #作者名称\n    language: zh-CN #显示语言\n\n执行以下命令拉起hexo  \nhexo s\n\n**安装 icarus主题**  \nnpm install hexo-theme-icarus  \nhexo config theme icarus\n\n上述环境搭建好后使用GitHubDesktop  \n将内容Push到github\n\nlinux安装好环境后使用pm2后台挂起hexo  \nrun_pm2.js  \n\n    //run\n    const { exec } = require('child_process')\n    exec('hexo server',(error, stdout, stderr) => {\n    if(error){\n    console.log('exec error: ${error}')\n    return\n    }\n    console.log('stdout: ${stdout}');\n    console.log('stderr: ${stderr}');\n    })\n\npm2 start run_pm2.js  pm2挂载hexo  \npm2 startup  开机自启动  \n\nlinux使用crontab定时git pull\n\n    nano /etc/crontab\n    */10 * * * * root /root/blog/auto_git_pull.sh >> /root/blog.log 2>&1\n    /etc/init.d/crontab restart\n\nauto_git_pull.sh\n\n    #!/bin/bash\n\n    cd /root/blog/\n    git pull\n\n**linux服务端部署完毕**\n\n**mac本地**\nhexo创建文章\nhexo new \"我的第一篇博客\"\n编写文章\npush到github\n自动同步到网站\n","source":"_posts/vsco-hexo-github创建博客.md","raw":"---\ntitle: vsco+hexo+github创建博客\ndate: 2022-04-20 14:14:38\ntags: [hexo,blog,github]\ncategories: 技术分享\n---\n![vsco+hexo+github创建博客](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxki70guwj31kw0w0qpu.jpg)\n通过Vsco+Hexo+Github创建个人博客\n=============================\n环境准备\n-----\n#### 本地mac = node12 + vscode + hexo + icarus  \n#### linux服务端 = ndoe12 + npm + pm2 + crontab\n\n**github创建项目储存博客内容  \n使用GithubDesktop打开项目**\n\n### 本地环境搭建\n**node使用了pkg方式安装**\n<https://nodejs.org/download/release/v12.22.7/>\n\n**安装 hexo-cli**  \nnpm i -g hexo-cli \n执行以下命令初始化hexo\nhexo init\n\n**编辑 _config.yml**\n\n    title: Jaakko的365天 #网站标题\n    subtitle: ''\n    description: ''\n    keywords: null #搜索关键字\n    author: Jaakko #作者名称\n    language: zh-CN #显示语言\n\n执行以下命令拉起hexo  \nhexo s\n\n**安装 icarus主题**  \nnpm install hexo-theme-icarus  \nhexo config theme icarus\n\n上述环境搭建好后使用GitHubDesktop  \n将内容Push到github\n\nlinux安装好环境后使用pm2后台挂起hexo  \nrun_pm2.js  \n\n    //run\n    const { exec } = require('child_process')\n    exec('hexo server',(error, stdout, stderr) => {\n    if(error){\n    console.log('exec error: ${error}')\n    return\n    }\n    console.log('stdout: ${stdout}');\n    console.log('stderr: ${stderr}');\n    })\n\npm2 start run_pm2.js  pm2挂载hexo  \npm2 startup  开机自启动  \n\nlinux使用crontab定时git pull\n\n    nano /etc/crontab\n    */10 * * * * root /root/blog/auto_git_pull.sh >> /root/blog.log 2>&1\n    /etc/init.d/crontab restart\n\nauto_git_pull.sh\n\n    #!/bin/bash\n\n    cd /root/blog/\n    git pull\n\n**linux服务端部署完毕**\n\n**mac本地**\nhexo创建文章\nhexo new \"我的第一篇博客\"\n编写文章\npush到github\n自动同步到网站\n","slug":"vsco-hexo-github创建博客","published":1,"updated":"2022-04-25T09:14:04.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq1000hefw5du7pcemo","content":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxki70guwj31kw0w0qpu.jpg\" alt=\"vsco+hexo+github创建博客\"><br>通过Vsco+Hexo+Github创建个人博客<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>环境准备</p>\n<hr>\n<h4 id=\"本地mac-x3D-node12-vscode-hexo-icarus\"><a href=\"#本地mac-x3D-node12-vscode-hexo-icarus\" class=\"headerlink\" title=\"本地mac &#x3D; node12 + vscode + hexo + icarus\"></a>本地mac &#x3D; node12 + vscode + hexo + icarus</h4><h4 id=\"linux服务端-x3D-ndoe12-npm-pm2-crontab\"><a href=\"#linux服务端-x3D-ndoe12-npm-pm2-crontab\" class=\"headerlink\" title=\"linux服务端 &#x3D; ndoe12 + npm + pm2 + crontab\"></a>linux服务端 &#x3D; ndoe12 + npm + pm2 + crontab</h4><p><strong>github创建项目储存博客内容<br>使用GithubDesktop打开项目</strong></p>\n<h3 id=\"本地环境搭建\"><a href=\"#本地环境搭建\" class=\"headerlink\" title=\"本地环境搭建\"></a>本地环境搭建</h3><p><strong>node使用了pkg方式安装</strong><br><a href=\"https://nodejs.org/download/release/v12.22.7/\">https://nodejs.org/download/release/v12.22.7/</a></p>\n<p><strong>安装 hexo-cli</strong><br>npm i -g hexo-cli<br>执行以下命令初始化hexo<br>hexo init</p>\n<p><strong>编辑 _config.yml</strong></p>\n<pre><code>title: Jaakko的365天 #网站标题\nsubtitle: &#39;&#39;\ndescription: &#39;&#39;\nkeywords: null #搜索关键字\nauthor: Jaakko #作者名称\nlanguage: zh-CN #显示语言\n</code></pre>\n<p>执行以下命令拉起hexo<br>hexo s</p>\n<p><strong>安装 icarus主题</strong><br>npm install hexo-theme-icarus<br>hexo config theme icarus</p>\n<p>上述环境搭建好后使用GitHubDesktop<br>将内容Push到github</p>\n<p>linux安装好环境后使用pm2后台挂起hexo<br>run_pm2.js  </p>\n<pre><code>//run\nconst &#123; exec &#125; = require(&#39;child_process&#39;)\nexec(&#39;hexo server&#39;,(error, stdout, stderr) =&gt; &#123;\nif(error)&#123;\nconsole.log(&#39;exec error: $&#123;error&#125;&#39;)\nreturn\n&#125;\nconsole.log(&#39;stdout: $&#123;stdout&#125;&#39;);\nconsole.log(&#39;stderr: $&#123;stderr&#125;&#39;);\n&#125;)\n</code></pre>\n<p>pm2 start run_pm2.js  pm2挂载hexo<br>pm2 startup  开机自启动  </p>\n<p>linux使用crontab定时git pull</p>\n<pre><code>nano /etc/crontab\n*/10 * * * * root /root/blog/auto_git_pull.sh &gt;&gt; /root/blog.log 2&gt;&amp;1\n/etc/init.d/crontab restart\n</code></pre>\n<p>auto_git_pull.sh</p>\n<pre><code>#!/bin/bash\n\ncd /root/blog/\ngit pull\n</code></pre>\n<p><strong>linux服务端部署完毕</strong></p>\n<p><strong>mac本地</strong><br>hexo创建文章<br>hexo new “我的第一篇博客”<br>编写文章<br>push到github<br>自动同步到网站</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxki70guwj31kw0w0qpu.jpg\" alt=\"vsco+hexo+github创建博客\"><br>通过Vsco+Hexo+Github创建个人博客<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>环境准备</p>\n<hr>\n<h4 id=\"本地mac-x3D-node12-vscode-hexo-icarus\"><a href=\"#本地mac-x3D-node12-vscode-hexo-icarus\" class=\"headerlink\" title=\"本地mac &#x3D; node12 + vscode + hexo + icarus\"></a>本地mac &#x3D; node12 + vscode + hexo + icarus</h4><h4 id=\"linux服务端-x3D-ndoe12-npm-pm2-crontab\"><a href=\"#linux服务端-x3D-ndoe12-npm-pm2-crontab\" class=\"headerlink\" title=\"linux服务端 &#x3D; ndoe12 + npm + pm2 + crontab\"></a>linux服务端 &#x3D; ndoe12 + npm + pm2 + crontab</h4><p><strong>github创建项目储存博客内容<br>使用GithubDesktop打开项目</strong></p>\n<h3 id=\"本地环境搭建\"><a href=\"#本地环境搭建\" class=\"headerlink\" title=\"本地环境搭建\"></a>本地环境搭建</h3><p><strong>node使用了pkg方式安装</strong><br><a href=\"https://nodejs.org/download/release/v12.22.7/\">https://nodejs.org/download/release/v12.22.7/</a></p>\n<p><strong>安装 hexo-cli</strong><br>npm i -g hexo-cli<br>执行以下命令初始化hexo<br>hexo init</p>\n<p><strong>编辑 _config.yml</strong></p>\n<pre><code>title: Jaakko的365天 #网站标题\nsubtitle: &#39;&#39;\ndescription: &#39;&#39;\nkeywords: null #搜索关键字\nauthor: Jaakko #作者名称\nlanguage: zh-CN #显示语言\n</code></pre>\n<p>执行以下命令拉起hexo<br>hexo s</p>\n<p><strong>安装 icarus主题</strong><br>npm install hexo-theme-icarus<br>hexo config theme icarus</p>\n<p>上述环境搭建好后使用GitHubDesktop<br>将内容Push到github</p>\n<p>linux安装好环境后使用pm2后台挂起hexo<br>run_pm2.js  </p>\n<pre><code>//run\nconst &#123; exec &#125; = require(&#39;child_process&#39;)\nexec(&#39;hexo server&#39;,(error, stdout, stderr) =&gt; &#123;\nif(error)&#123;\nconsole.log(&#39;exec error: $&#123;error&#125;&#39;)\nreturn\n&#125;\nconsole.log(&#39;stdout: $&#123;stdout&#125;&#39;);\nconsole.log(&#39;stderr: $&#123;stderr&#125;&#39;);\n&#125;)\n</code></pre>\n<p>pm2 start run_pm2.js  pm2挂载hexo<br>pm2 startup  开机自启动  </p>\n<p>linux使用crontab定时git pull</p>\n<pre><code>nano /etc/crontab\n*/10 * * * * root /root/blog/auto_git_pull.sh &gt;&gt; /root/blog.log 2&gt;&amp;1\n/etc/init.d/crontab restart\n</code></pre>\n<p>auto_git_pull.sh</p>\n<pre><code>#!/bin/bash\n\ncd /root/blog/\ngit pull\n</code></pre>\n<p><strong>linux服务端部署完毕</strong></p>\n<p><strong>mac本地</strong><br>hexo创建文章<br>hexo new “我的第一篇博客”<br>编写文章<br>push到github<br>自动同步到网站</p>\n"},{"title":"申请一年野卡域名证书","date":"2022-04-22T06:24:23.000Z","_content":"![关于申请域名证书这件小事](https://tva1.sinaimg.cn/large/a15b4afegy1fmvjgbajynj21hc0u07du.jpg)\n\n首先\n---\n由于Let'S申请的免费泛域证书有效期只有三个月  \n每三个月就要重新生成证书并替换证书文件  \n不像单域名一样可以无限renew并且不用替换证书文件\n\n然后\n---\n我在购买SSL的网站转了一圈发现 购买价格最低在40美金一年  \n平均价格在350美金 名牌商家的价格甚至超过600美金\n\n所以\n---\n我找到了一个低成本（30元）申请一年泛域名证书方法  \n在节礼给大家分享一下  \n流程大概是下面这样  \n+ 1.申请一个域名邮箱(admin@domain.ltd)\n+ 2.生成CSR + Private Key\n+ 3.使用Token + CSR 申请Alpha泛域\n+ 4.在邮箱内确认开通泛域信息\n+ 5.合并中间证书\n\n[域名邮箱申请](https://mail.zohu.com.cn)\n[CSR生成地址](https://api.moeclub.org/SSL/CSR)  \n[SSL申请地址](https://api.moeclub.org/SSL)  \n[Token购买地址](https://shop.moeclub.org)\n\n证书合并方式：  \n新建一个空白文档(cert.pem)  \n1. 粘贴邮件尾部的证书\n2. 粘贴Alpha中间证书  \n‘-----BEGIN CERTIFICATE-----\nMIIETTCCAzWgAwIBAgILBAAAAAABRE7wNjEwDQYJKoZIhvcNAQELBQAwVzELMAkG\nA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv\nb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw\nMDBaFw0yNDAyMjAxMDAwMDBaMEwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i\nYWxTaWduIG52LXNhMSIwIAYDVQQDExlBbHBoYVNTTCBDQSAtIFNIQTI1NiAtIEcy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2gHs5OxzYPt+j2q3xhfj\nkmQy1KwA2aIPue3ua4qGypJn2XTXXUcCPI9A1p5tFM3D2ik5pw8FCmiiZhoexLKL\ndljlq10dj0CzOYvvHoN9ItDjqQAu7FPPYhmFRChMwCfLew7sEGQAEKQFzKByvkFs\nMVtI5LHsuSPrVU3QfWJKpbSlpFmFxSWRpv6mCZ8GEG2PgQxkQF5zAJrgLmWYVBAA\ncJjI4e00X9icxw3A1iNZRfz+VXqG7pRgIvGu0eZVRvaZxRsIdF+ssGSEj4k4HKGn\nkCFPAm694GFn1PhChw8K98kEbSqpL+9Cpd/do1PbmB6B+Zpye1reTz5/olig4het\nZwIDAQABo4IBIzCCAR8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C\nAQAwHQYDVR0OBBYEFPXN1TwIUPlqTzq3l9pWg+Zp0mj3MEUGA1UdIAQ+MDwwOgYE\nVR0gADAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy5hbHBoYXNzbC5jb20vcmVw\nb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nbG9iYWxzaWdu\nLm5ldC9yb290LmNybDA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAGGIWh0dHA6\nLy9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3RyMTAfBgNVHSMEGDAWgBRge2YaRQ2X\nyolQL30EzTSo//z9SzANBgkqhkiG9w0BAQsFAAOCAQEAYEBoFkfnFo3bXKFWKsv0\nXJuwHqJL9csCP/gLofKnQtS3TOvjZoDzJUN4LhsXVgdSGMvRqOzm+3M+pGKMgLTS\nxRJzo9P6Aji+Yz2EuJnB8br3n8NA0VgYU8Fi3a8YQn80TsVD1XGwMADH45CuP1eG\nl87qDBKOInDjZqdUfy4oy9RU0LMeYmcI+Sfhy+NmuCQbiWqJRGXy2UzSWByMTsCV\nodTvZy84IOgu/5ZR8LrYPZJwR2UcnnNytGAMXOLRc3bgr07i5TelRS+KIz6HxzDm\nMTh89N1SyvNTBCVXVmaU6Avu5gMUTu79bZRknl7OedSyps9AsUSoPocZXun4IRZZ\nUw==\n-----END CERTIFICATE-----’\n\n以上[1+2]合并成cert.pem  \n\n另外新建一个空白文档(cert.key)  \n粘贴在第二步生成Private Key  \n\n**将以上两个证书密钥部署到服务器即可完成证书申请到部署全部步骤**\n\n\n\n\n","source":"_posts/申请一年野卡域名证书.md","raw":"---\ntitle: 申请一年野卡域名证书\ndate: 2022-04-22 14:24:23\ntags: [SSL]\ncategories: 技术分享\n---\n![关于申请域名证书这件小事](https://tva1.sinaimg.cn/large/a15b4afegy1fmvjgbajynj21hc0u07du.jpg)\n\n首先\n---\n由于Let'S申请的免费泛域证书有效期只有三个月  \n每三个月就要重新生成证书并替换证书文件  \n不像单域名一样可以无限renew并且不用替换证书文件\n\n然后\n---\n我在购买SSL的网站转了一圈发现 购买价格最低在40美金一年  \n平均价格在350美金 名牌商家的价格甚至超过600美金\n\n所以\n---\n我找到了一个低成本（30元）申请一年泛域名证书方法  \n在节礼给大家分享一下  \n流程大概是下面这样  \n+ 1.申请一个域名邮箱(admin@domain.ltd)\n+ 2.生成CSR + Private Key\n+ 3.使用Token + CSR 申请Alpha泛域\n+ 4.在邮箱内确认开通泛域信息\n+ 5.合并中间证书\n\n[域名邮箱申请](https://mail.zohu.com.cn)\n[CSR生成地址](https://api.moeclub.org/SSL/CSR)  \n[SSL申请地址](https://api.moeclub.org/SSL)  \n[Token购买地址](https://shop.moeclub.org)\n\n证书合并方式：  \n新建一个空白文档(cert.pem)  \n1. 粘贴邮件尾部的证书\n2. 粘贴Alpha中间证书  \n‘-----BEGIN CERTIFICATE-----\nMIIETTCCAzWgAwIBAgILBAAAAAABRE7wNjEwDQYJKoZIhvcNAQELBQAwVzELMAkG\nA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv\nb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw\nMDBaFw0yNDAyMjAxMDAwMDBaMEwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i\nYWxTaWduIG52LXNhMSIwIAYDVQQDExlBbHBoYVNTTCBDQSAtIFNIQTI1NiAtIEcy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2gHs5OxzYPt+j2q3xhfj\nkmQy1KwA2aIPue3ua4qGypJn2XTXXUcCPI9A1p5tFM3D2ik5pw8FCmiiZhoexLKL\ndljlq10dj0CzOYvvHoN9ItDjqQAu7FPPYhmFRChMwCfLew7sEGQAEKQFzKByvkFs\nMVtI5LHsuSPrVU3QfWJKpbSlpFmFxSWRpv6mCZ8GEG2PgQxkQF5zAJrgLmWYVBAA\ncJjI4e00X9icxw3A1iNZRfz+VXqG7pRgIvGu0eZVRvaZxRsIdF+ssGSEj4k4HKGn\nkCFPAm694GFn1PhChw8K98kEbSqpL+9Cpd/do1PbmB6B+Zpye1reTz5/olig4het\nZwIDAQABo4IBIzCCAR8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C\nAQAwHQYDVR0OBBYEFPXN1TwIUPlqTzq3l9pWg+Zp0mj3MEUGA1UdIAQ+MDwwOgYE\nVR0gADAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy5hbHBoYXNzbC5jb20vcmVw\nb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nbG9iYWxzaWdu\nLm5ldC9yb290LmNybDA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAGGIWh0dHA6\nLy9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3RyMTAfBgNVHSMEGDAWgBRge2YaRQ2X\nyolQL30EzTSo//z9SzANBgkqhkiG9w0BAQsFAAOCAQEAYEBoFkfnFo3bXKFWKsv0\nXJuwHqJL9csCP/gLofKnQtS3TOvjZoDzJUN4LhsXVgdSGMvRqOzm+3M+pGKMgLTS\nxRJzo9P6Aji+Yz2EuJnB8br3n8NA0VgYU8Fi3a8YQn80TsVD1XGwMADH45CuP1eG\nl87qDBKOInDjZqdUfy4oy9RU0LMeYmcI+Sfhy+NmuCQbiWqJRGXy2UzSWByMTsCV\nodTvZy84IOgu/5ZR8LrYPZJwR2UcnnNytGAMXOLRc3bgr07i5TelRS+KIz6HxzDm\nMTh89N1SyvNTBCVXVmaU6Avu5gMUTu79bZRknl7OedSyps9AsUSoPocZXun4IRZZ\nUw==\n-----END CERTIFICATE-----’\n\n以上[1+2]合并成cert.pem  \n\n另外新建一个空白文档(cert.key)  \n粘贴在第二步生成Private Key  \n\n**将以上两个证书密钥部署到服务器即可完成证书申请到部署全部步骤**\n\n\n\n\n","slug":"申请一年野卡域名证书","published":1,"updated":"2022-04-25T09:13:01.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq1000jefw5c7ar4ta0","content":"<p><img src=\"https://tva1.sinaimg.cn/large/a15b4afegy1fmvjgbajynj21hc0u07du.jpg\" alt=\"关于申请域名证书这件小事\"></p>\n<h2 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h2><p>由于Let’S申请的免费泛域证书有效期只有三个月<br>每三个月就要重新生成证书并替换证书文件<br>不像单域名一样可以无限renew并且不用替换证书文件</p>\n<h2 id=\"然后\"><a href=\"#然后\" class=\"headerlink\" title=\"然后\"></a>然后</h2><p>我在购买SSL的网站转了一圈发现 购买价格最低在40美金一年<br>平均价格在350美金 名牌商家的价格甚至超过600美金</p>\n<h2 id=\"所以\"><a href=\"#所以\" class=\"headerlink\" title=\"所以\"></a>所以</h2><p>我找到了一个低成本（30元）申请一年泛域名证书方法<br>在节礼给大家分享一下<br>流程大概是下面这样  </p>\n<ul>\n<li>1.申请一个域名邮箱(<a href=\"mailto:&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#100;&#x6f;&#109;&#x61;&#105;&#110;&#x2e;&#108;&#x74;&#x64;\">&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#100;&#x6f;&#109;&#x61;&#105;&#110;&#x2e;&#108;&#x74;&#x64;</a>)</li>\n<li>2.生成CSR + Private Key</li>\n<li>3.使用Token + CSR 申请Alpha泛域</li>\n<li>4.在邮箱内确认开通泛域信息</li>\n<li>5.合并中间证书</li>\n</ul>\n<p><a href=\"https://mail.zohu.com.cn/\">域名邮箱申请</a><br><a href=\"https://api.moeclub.org/SSL/CSR\">CSR生成地址</a><br><a href=\"https://api.moeclub.org/SSL\">SSL申请地址</a><br><a href=\"https://shop.moeclub.org/\">Token购买地址</a></p>\n<p>证书合并方式：<br>新建一个空白文档(cert.pem)  </p>\n<ol>\n<li>粘贴邮件尾部的证书</li>\n<li>粘贴Alpha中间证书<br>‘—–BEGIN CERTIFICATE—–<br>MIIETTCCAzWgAwIBAgILBAAAAAABRE7wNjEwDQYJKoZIhvcNAQELBQAwVzELMAkG<br>A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv<br>b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw<br>MDBaFw0yNDAyMjAxMDAwMDBaMEwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i<br>YWxTaWduIG52LXNhMSIwIAYDVQQDExlBbHBoYVNTTCBDQSAtIFNIQTI1NiAtIEcy<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2gHs5OxzYPt+j2q3xhfj<br>kmQy1KwA2aIPue3ua4qGypJn2XTXXUcCPI9A1p5tFM3D2ik5pw8FCmiiZhoexLKL<br>dljlq10dj0CzOYvvHoN9ItDjqQAu7FPPYhmFRChMwCfLew7sEGQAEKQFzKByvkFs<br>MVtI5LHsuSPrVU3QfWJKpbSlpFmFxSWRpv6mCZ8GEG2PgQxkQF5zAJrgLmWYVBAA<br>cJjI4e00X9icxw3A1iNZRfz+VXqG7pRgIvGu0eZVRvaZxRsIdF+ssGSEj4k4HKGn<br>kCFPAm694GFn1PhChw8K98kEbSqpL+9Cpd&#x2F;do1PbmB6B+Zpye1reTz5&#x2F;olig4het<br>ZwIDAQABo4IBIzCCAR8wDgYDVR0PAQH&#x2F;BAQDAgEGMBIGA1UdEwEB&#x2F;wQIMAYBAf8C<br>AQAwHQYDVR0OBBYEFPXN1TwIUPlqTzq3l9pWg+Zp0mj3MEUGA1UdIAQ+MDwwOgYE<br>VR0gADAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy5hbHBoYXNzbC5jb20vcmVw<br>b3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nbG9iYWxzaWdu<br>Lm5ldC9yb290LmNybDA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAGGIWh0dHA6<br>Ly9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3RyMTAfBgNVHSMEGDAWgBRge2YaRQ2X<br>yolQL30EzTSo&#x2F;&#x2F;z9SzANBgkqhkiG9w0BAQsFAAOCAQEAYEBoFkfnFo3bXKFWKsv0<br>XJuwHqJL9csCP&#x2F;gLofKnQtS3TOvjZoDzJUN4LhsXVgdSGMvRqOzm+3M+pGKMgLTS<br>xRJzo9P6Aji+Yz2EuJnB8br3n8NA0VgYU8Fi3a8YQn80TsVD1XGwMADH45CuP1eG<br>l87qDBKOInDjZqdUfy4oy9RU0LMeYmcI+Sfhy+NmuCQbiWqJRGXy2UzSWByMTsCV<br>odTvZy84IOgu&#x2F;5ZR8LrYPZJwR2UcnnNytGAMXOLRc3bgr07i5TelRS+KIz6HxzDm<br>MTh89N1SyvNTBCVXVmaU6Avu5gMUTu79bZRknl7OedSyps9AsUSoPocZXun4IRZZ<br>Uw&#x3D;&#x3D;</li>\n</ol>\n<p>—–END CERTIFICATE—–’</p>\n<p>以上[1+2]合并成cert.pem  </p>\n<p>另外新建一个空白文档(cert.key)<br>粘贴在第二步生成Private Key  </p>\n<p><strong>将以上两个证书密钥部署到服务器即可完成证书申请到部署全部步骤</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva1.sinaimg.cn/large/a15b4afegy1fmvjgbajynj21hc0u07du.jpg\" alt=\"关于申请域名证书这件小事\"></p>\n<h2 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h2><p>由于Let’S申请的免费泛域证书有效期只有三个月<br>每三个月就要重新生成证书并替换证书文件<br>不像单域名一样可以无限renew并且不用替换证书文件</p>\n<h2 id=\"然后\"><a href=\"#然后\" class=\"headerlink\" title=\"然后\"></a>然后</h2><p>我在购买SSL的网站转了一圈发现 购买价格最低在40美金一年<br>平均价格在350美金 名牌商家的价格甚至超过600美金</p>\n<h2 id=\"所以\"><a href=\"#所以\" class=\"headerlink\" title=\"所以\"></a>所以</h2><p>我找到了一个低成本（30元）申请一年泛域名证书方法<br>在节礼给大家分享一下<br>流程大概是下面这样  </p>\n<ul>\n<li>1.申请一个域名邮箱(<a href=\"mailto:&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#100;&#x6f;&#109;&#x61;&#105;&#110;&#x2e;&#108;&#x74;&#x64;\">&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#100;&#x6f;&#109;&#x61;&#105;&#110;&#x2e;&#108;&#x74;&#x64;</a>)</li>\n<li>2.生成CSR + Private Key</li>\n<li>3.使用Token + CSR 申请Alpha泛域</li>\n<li>4.在邮箱内确认开通泛域信息</li>\n<li>5.合并中间证书</li>\n</ul>\n<p><a href=\"https://mail.zohu.com.cn/\">域名邮箱申请</a><br><a href=\"https://api.moeclub.org/SSL/CSR\">CSR生成地址</a><br><a href=\"https://api.moeclub.org/SSL\">SSL申请地址</a><br><a href=\"https://shop.moeclub.org/\">Token购买地址</a></p>\n<p>证书合并方式：<br>新建一个空白文档(cert.pem)  </p>\n<ol>\n<li>粘贴邮件尾部的证书</li>\n<li>粘贴Alpha中间证书<br>‘—–BEGIN CERTIFICATE—–<br>MIIETTCCAzWgAwIBAgILBAAAAAABRE7wNjEwDQYJKoZIhvcNAQELBQAwVzELMAkG<br>A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv<br>b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw<br>MDBaFw0yNDAyMjAxMDAwMDBaMEwxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i<br>YWxTaWduIG52LXNhMSIwIAYDVQQDExlBbHBoYVNTTCBDQSAtIFNIQTI1NiAtIEcy<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2gHs5OxzYPt+j2q3xhfj<br>kmQy1KwA2aIPue3ua4qGypJn2XTXXUcCPI9A1p5tFM3D2ik5pw8FCmiiZhoexLKL<br>dljlq10dj0CzOYvvHoN9ItDjqQAu7FPPYhmFRChMwCfLew7sEGQAEKQFzKByvkFs<br>MVtI5LHsuSPrVU3QfWJKpbSlpFmFxSWRpv6mCZ8GEG2PgQxkQF5zAJrgLmWYVBAA<br>cJjI4e00X9icxw3A1iNZRfz+VXqG7pRgIvGu0eZVRvaZxRsIdF+ssGSEj4k4HKGn<br>kCFPAm694GFn1PhChw8K98kEbSqpL+9Cpd&#x2F;do1PbmB6B+Zpye1reTz5&#x2F;olig4het<br>ZwIDAQABo4IBIzCCAR8wDgYDVR0PAQH&#x2F;BAQDAgEGMBIGA1UdEwEB&#x2F;wQIMAYBAf8C<br>AQAwHQYDVR0OBBYEFPXN1TwIUPlqTzq3l9pWg+Zp0mj3MEUGA1UdIAQ+MDwwOgYE<br>VR0gADAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy5hbHBoYXNzbC5jb20vcmVw<br>b3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nbG9iYWxzaWdu<br>Lm5ldC9yb290LmNybDA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAGGIWh0dHA6<br>Ly9vY3NwLmdsb2JhbHNpZ24uY29tL3Jvb3RyMTAfBgNVHSMEGDAWgBRge2YaRQ2X<br>yolQL30EzTSo&#x2F;&#x2F;z9SzANBgkqhkiG9w0BAQsFAAOCAQEAYEBoFkfnFo3bXKFWKsv0<br>XJuwHqJL9csCP&#x2F;gLofKnQtS3TOvjZoDzJUN4LhsXVgdSGMvRqOzm+3M+pGKMgLTS<br>xRJzo9P6Aji+Yz2EuJnB8br3n8NA0VgYU8Fi3a8YQn80TsVD1XGwMADH45CuP1eG<br>l87qDBKOInDjZqdUfy4oy9RU0LMeYmcI+Sfhy+NmuCQbiWqJRGXy2UzSWByMTsCV<br>odTvZy84IOgu&#x2F;5ZR8LrYPZJwR2UcnnNytGAMXOLRc3bgr07i5TelRS+KIz6HxzDm<br>MTh89N1SyvNTBCVXVmaU6Avu5gMUTu79bZRknl7OedSyps9AsUSoPocZXun4IRZZ<br>Uw&#x3D;&#x3D;</li>\n</ol>\n<p>—–END CERTIFICATE—–’</p>\n<p>以上[1+2]合并成cert.pem  </p>\n<p>另外新建一个空白文档(cert.key)<br>粘贴在第二步生成Private Key  </p>\n<p><strong>将以上两个证书密钥部署到服务器即可完成证书申请到部署全部步骤</strong></p>\n"},{"title":"梦里花落知多少-三毛:荒山之夜","date":"2022-04-26T11:32:36.000Z","_content":"![](https://im1.book.com.tw/image/getImage?i=https://www.books.com.tw/img/CN1/142/93/CN11429310.jpg&v=59779084&w=348&h=348)\n\n荒山之夜\n=======\n\n**Echo的好友拉蒙爱上了一位正在念高中的女学生**\n\n**拉蒙问了一个问题，Echo回答的很好**\n\n“做木匠是低贱的工作吗？”\n\n“不，不是的”\n\n“那为什么读书人经常看不起我们这些木匠呢？”\n\n“那是因为他们没有把书念好，脑筋念笨了呢！”  \n\n\n\n\n**当Echo因为胃痛想要在夜里独自下山时**\n\n**拉蒙想要送她下山，却被拒绝**\n\n他说：“Echo，你是骄傲的，你一向性格温和，其实是固执而拒人千里的”\n\n\n","source":"_posts/梦里花落知多少-三毛-荒山之夜.md","raw":"---\ntitle: 梦里花落知多少-三毛:荒山之夜\ndate: 2022-04-26 19:32:36\ntags: [book, 三毛]\ncategories: 读书分享\n---\n![](https://im1.book.com.tw/image/getImage?i=https://www.books.com.tw/img/CN1/142/93/CN11429310.jpg&v=59779084&w=348&h=348)\n\n荒山之夜\n=======\n\n**Echo的好友拉蒙爱上了一位正在念高中的女学生**\n\n**拉蒙问了一个问题，Echo回答的很好**\n\n“做木匠是低贱的工作吗？”\n\n“不，不是的”\n\n“那为什么读书人经常看不起我们这些木匠呢？”\n\n“那是因为他们没有把书念好，脑筋念笨了呢！”  \n\n\n\n\n**当Echo因为胃痛想要在夜里独自下山时**\n\n**拉蒙想要送她下山，却被拒绝**\n\n他说：“Echo，你是骄傲的，你一向性格温和，其实是固执而拒人千里的”\n\n\n","slug":"梦里花落知多少-三毛-荒山之夜","published":1,"updated":"2022-04-26T11:36:30.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq2000mefw57wgia9od","content":"<p><img src=\"https://im1.book.com.tw/image/getImage?i=https://www.books.com.tw/img/CN1/142/93/CN11429310.jpg&v=59779084&w=348&h=348\"></p>\n<h1 id=\"荒山之夜\"><a href=\"#荒山之夜\" class=\"headerlink\" title=\"荒山之夜\"></a>荒山之夜</h1><p><strong>Echo的好友拉蒙爱上了一位正在念高中的女学生</strong></p>\n<p><strong>拉蒙问了一个问题，Echo回答的很好</strong></p>\n<p>“做木匠是低贱的工作吗？”</p>\n<p>“不，不是的”</p>\n<p>“那为什么读书人经常看不起我们这些木匠呢？”</p>\n<p>“那是因为他们没有把书念好，脑筋念笨了呢！”  </p>\n<p><strong>当Echo因为胃痛想要在夜里独自下山时</strong></p>\n<p><strong>拉蒙想要送她下山，却被拒绝</strong></p>\n<p>他说：“Echo，你是骄傲的，你一向性格温和，其实是固执而拒人千里的”</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://im1.book.com.tw/image/getImage?i=https://www.books.com.tw/img/CN1/142/93/CN11429310.jpg&v=59779084&w=348&h=348\"></p>\n<h1 id=\"荒山之夜\"><a href=\"#荒山之夜\" class=\"headerlink\" title=\"荒山之夜\"></a>荒山之夜</h1><p><strong>Echo的好友拉蒙爱上了一位正在念高中的女学生</strong></p>\n<p><strong>拉蒙问了一个问题，Echo回答的很好</strong></p>\n<p>“做木匠是低贱的工作吗？”</p>\n<p>“不，不是的”</p>\n<p>“那为什么读书人经常看不起我们这些木匠呢？”</p>\n<p>“那是因为他们没有把书念好，脑筋念笨了呢！”  </p>\n<p><strong>当Echo因为胃痛想要在夜里独自下山时</strong></p>\n<p><strong>拉蒙想要送她下山，却被拒绝</strong></p>\n<p>他说：“Echo，你是骄傲的，你一向性格温和，其实是固执而拒人千里的”</p>\n"},{"title":"解决hexo图片插入不显示问题","date":"2022-04-25T08:46:33.000Z","_content":"![](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxln98mdaj31hc0u018i.jpg)\n\n说明：\n---\n  **在这之前使用hexo写东西上传照片总是不太方便，所以今天查了一下hexo图片上传以及显示的解决方案。**\n\n1. 在hexo目录执行  \n\n        npm install hexo-asset-img --save\n2. 修改_config.yml  \n将post_asset_folder: false 修改为true  \n\n        post_asset_folder: true\n3. 通过hexo n \"文档文章\"新建文章  \n会在source的post下自动生成一个 文章.md 以及一个文章同名目录  \n那么文章同名目录下就可以存放我们需要引用的图片了  \n调用方法：\n\n        ![](文章目录/your_img.jpg)\n经测试：通过以上方式插入图片，在VSCODE的Preview能够正常显示图片  \n在网站的文章内会自动转换成：{% asset_img img.jpg %}格式  \n这样即不影响我们编辑文章也不影响文章图片正常显示  \n我们需要的做的就只是正常生成文章  \n将需要的图片上传到目录中\n正常插入图片\n\n如果使用typora只需要设置文章根目录，上传图片可以直接拖拽或者粘贴会更加便捷。\n\n今天的技术分享到此结束！！\n","source":"_posts/解决hexo图片插入不显示问题.md","raw":"---\ntitle: 解决hexo图片插入不显示问题\ndate: 2022-04-25 16:46:33\ntags: [hexo, icarus]\ncategories: 技术分享\n---\n![](https://tva2.sinaimg.cn/large/0072Vf1pgy1foxln98mdaj31hc0u018i.jpg)\n\n说明：\n---\n  **在这之前使用hexo写东西上传照片总是不太方便，所以今天查了一下hexo图片上传以及显示的解决方案。**\n\n1. 在hexo目录执行  \n\n        npm install hexo-asset-img --save\n2. 修改_config.yml  \n将post_asset_folder: false 修改为true  \n\n        post_asset_folder: true\n3. 通过hexo n \"文档文章\"新建文章  \n会在source的post下自动生成一个 文章.md 以及一个文章同名目录  \n那么文章同名目录下就可以存放我们需要引用的图片了  \n调用方法：\n\n        ![](文章目录/your_img.jpg)\n经测试：通过以上方式插入图片，在VSCODE的Preview能够正常显示图片  \n在网站的文章内会自动转换成：{% asset_img img.jpg %}格式  \n这样即不影响我们编辑文章也不影响文章图片正常显示  \n我们需要的做的就只是正常生成文章  \n将需要的图片上传到目录中\n正常插入图片\n\n如果使用typora只需要设置文章根目录，上传图片可以直接拖拽或者粘贴会更加便捷。\n\n今天的技术分享到此结束！！\n","slug":"解决hexo图片插入不显示问题","published":1,"updated":"2022-04-25T09:12:55.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2g2pnq60013efw5f5ngbxrd","content":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxln98mdaj31hc0u018i.jpg\"></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><p>  <strong>在这之前使用hexo写东西上传照片总是不太方便，所以今天查了一下hexo图片上传以及显示的解决方案。</strong></p>\n<ol>\n<li><p>在hexo目录执行  </p>\n<pre><code> npm install hexo-asset-img --save\n</code></pre>\n</li>\n<li><p>修改_config.yml<br>将post_asset_folder: false 修改为true  </p>\n<pre><code> post_asset_folder: true\n</code></pre>\n</li>\n<li><p>通过hexo n “文档文章”新建文章<br>会在source的post下自动生成一个 文章.md 以及一个文章同名目录<br>那么文章同名目录下就可以存放我们需要引用的图片了<br>调用方法：</p>\n<pre><code> ![](文章目录/your_img.jpg)\n</code></pre>\n</li>\n</ol>\n<p>经测试：通过以上方式插入图片，在VSCODE的Preview能够正常显示图片<br>在网站的文章内会自动转换成：格式<br>这样即不影响我们编辑文章也不影响文章图片正常显示<br>我们需要的做的就只是正常生成文章<br>将需要的图片上传到目录中<br>正常插入图片</p>\n<p>如果使用typora只需要设置文章根目录，上传图片可以直接拖拽或者粘贴会更加便捷。</p>\n<p>今天的技术分享到此结束！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tva2.sinaimg.cn/large/0072Vf1pgy1foxln98mdaj31hc0u018i.jpg\"></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><p>  <strong>在这之前使用hexo写东西上传照片总是不太方便，所以今天查了一下hexo图片上传以及显示的解决方案。</strong></p>\n<ol>\n<li><p>在hexo目录执行  </p>\n<pre><code> npm install hexo-asset-img --save\n</code></pre>\n</li>\n<li><p>修改_config.yml<br>将post_asset_folder: false 修改为true  </p>\n<pre><code> post_asset_folder: true\n</code></pre>\n</li>\n<li><p>通过hexo n “文档文章”新建文章<br>会在source的post下自动生成一个 文章.md 以及一个文章同名目录<br>那么文章同名目录下就可以存放我们需要引用的图片了<br>调用方法：</p>\n<pre><code> ![](文章目录/your_img.jpg)\n</code></pre>\n</li>\n</ol>\n<p>经测试：通过以上方式插入图片，在VSCODE的Preview能够正常显示图片<br>在网站的文章内会自动转换成：格式<br>这样即不影响我们编辑文章也不影响文章图片正常显示<br>我们需要的做的就只是正常生成文章<br>将需要的图片上传到目录中<br>正常插入图片</p>\n<p>如果使用typora只需要设置文章根目录，上传图片可以直接拖拽或者粘贴会更加便捷。</p>\n<p>今天的技术分享到此结束！！</p>\n"}],"PostAsset":[{"_id":"source/_posts/Typora流程图代码实例/hello.jpeg","post":"cl2g2pnpp0000efw50qrn6sty","slug":"hello.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Typora流程图代码实例/test.png","post":"cl2g2pnpp0000efw50qrn6sty","slug":"test.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl2g2pnpp0000efw50qrn6sty","category_id":"cl2g2pnpw0002efw5ap2307fo","_id":"cl2g2pnpx0006efw59f6a93p2"},{"post_id":"cl2g2pnpu0001efw59mf29qoa","category_id":"cl2g2pnpx0004efw5csf0b0on","_id":"cl2g2pnpy0008efw52tlrcdif"},{"post_id":"cl2g2pnq0000eefw51v59h498","category_id":"cl2g2pnpx0004efw5csf0b0on","_id":"cl2g2pnq2000kefw52t1u9cy6"},{"post_id":"cl2g2pnq0000fefw52zs4f38p","category_id":"cl2g2pnpx0004efw5csf0b0on","_id":"cl2g2pnq3000nefw5fjzs38tl"},{"post_id":"cl2g2pnq1000hefw5du7pcemo","category_id":"cl2g2pnpw0002efw5ap2307fo","_id":"cl2g2pnq3000oefw5hpltayh6"},{"post_id":"cl2g2pnq1000jefw5c7ar4ta0","category_id":"cl2g2pnpw0002efw5ap2307fo","_id":"cl2g2pnq3000refw5fhu85p65"},{"post_id":"cl2g2pnq2000mefw57wgia9od","category_id":"cl2g2pnq3000pefw5fan42bii","_id":"cl2g2pnq4000tefw54e0u46dp"},{"post_id":"cl2g2pnq60013efw5f5ngbxrd","category_id":"cl2g2pnpw0002efw5ap2307fo","_id":"cl2g2pnqd0015efw5cc4yac6k"}],"PostTag":[{"post_id":"cl2g2pnpp0000efw50qrn6sty","tag_id":"cl2g2pnpw0003efw5f65o0yzz","_id":"cl2g2pnpz000aefw562vtbezz"},{"post_id":"cl2g2pnpp0000efw50qrn6sty","tag_id":"cl2g2pnpx0005efw55p4f6nwt","_id":"cl2g2pnpz000befw53d0levor"},{"post_id":"cl2g2pnpp0000efw50qrn6sty","tag_id":"cl2g2pnpx0007efw5983e56cx","_id":"cl2g2pnpz000cefw5f8gf892m"},{"post_id":"cl2g2pnpu0001efw59mf29qoa","tag_id":"cl2g2pnpy0009efw5ex565rjk","_id":"cl2g2pnpz000defw528fhabeb"},{"post_id":"cl2g2pnq0000eefw51v59h498","tag_id":"cl2g2pnpy0009efw5ex565rjk","_id":"cl2g2pnq1000gefw5e03cgw67"},{"post_id":"cl2g2pnq0000fefw52zs4f38p","tag_id":"cl2g2pnpy0009efw5ex565rjk","_id":"cl2g2pnq1000iefw50sgv0odc"},{"post_id":"cl2g2pnq1000hefw5du7pcemo","tag_id":"cl2g2pnq2000lefw5hwtke9pm","_id":"cl2g2pnq5000vefw588qm5cyh"},{"post_id":"cl2g2pnq1000hefw5du7pcemo","tag_id":"cl2g2pnq3000qefw53uz1hesu","_id":"cl2g2pnq5000wefw5ctk48g42"},{"post_id":"cl2g2pnq1000hefw5du7pcemo","tag_id":"cl2g2pnq3000sefw5g0dabt7a","_id":"cl2g2pnq5000yefw5f5pa2bsb"},{"post_id":"cl2g2pnq1000jefw5c7ar4ta0","tag_id":"cl2g2pnq4000uefw5e7i4h6at","_id":"cl2g2pnq5000zefw5emgt2ayc"},{"post_id":"cl2g2pnq2000mefw57wgia9od","tag_id":"cl2g2pnq5000xefw5dqxk9dei","_id":"cl2g2pnq50011efw5c7kf85v8"},{"post_id":"cl2g2pnq2000mefw57wgia9od","tag_id":"cl2g2pnq50010efw5dt1wd4gs","_id":"cl2g2pnq50012efw55xi625qr"},{"post_id":"cl2g2pnq60013efw5f5ngbxrd","tag_id":"cl2g2pnq2000lefw5hwtke9pm","_id":"cl2g2pnqd0016efw5hny174ms"},{"post_id":"cl2g2pnq60013efw5f5ngbxrd","tag_id":"cl2g2pnqd0014efw55cmb1w32","_id":"cl2g2pnqd0017efw52nfc7h3k"}],"Tag":[{"name":"typora","_id":"cl2g2pnpw0003efw5f65o0yzz"},{"name":"流程图","_id":"cl2g2pnpx0005efw55p4f6nwt"},{"name":"mermaid","_id":"cl2g2pnpx0007efw5983e56cx"},{"name":"flutter","_id":"cl2g2pnpy0009efw5ex565rjk"},{"name":"hexo","_id":"cl2g2pnq2000lefw5hwtke9pm"},{"name":"blog","_id":"cl2g2pnq3000qefw53uz1hesu"},{"name":"github","_id":"cl2g2pnq3000sefw5g0dabt7a"},{"name":"SSL","_id":"cl2g2pnq4000uefw5e7i4h6at"},{"name":"book","_id":"cl2g2pnq5000xefw5dqxk9dei"},{"name":"三毛","_id":"cl2g2pnq50010efw5dt1wd4gs"},{"name":"icarus","_id":"cl2g2pnqd0014efw55cmb1w32"}]}}